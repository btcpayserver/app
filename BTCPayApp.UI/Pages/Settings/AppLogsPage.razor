@attribute [Route(Routes.AppLogs)]
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Services
@using BTCPayApp.UI.Components.Layout
@using Serilog.Events
@inject ConfigProvider ConfigProvider
@inject LoggingService LogService

<PageTitle>Application Logs</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Logs</h1>
        <SectionContent SectionId="Titlebar.End">
            <InputSelect @bind-Value="LogService.LogLevel" @bind-Value:after="() => PersistLogLevel(LogService.LogLevel)" id="LogLevel" class="form-select form-select-sm px-2 py-1 w-auto" style="padding-right: var(--btcpay-space-l) !important;background-position-x:90%;">
                @foreach (var lvl in LogLevels)
                {
                    <option value="@lvl" selected="@(LogService.LogLevel == lvl)">@lvl</option>
                }
            </InputSelect>
        </SectionContent>
    </Titlebar>
</SectionContent>

<section class="container">
    @if (_isLoading)
    {
        <div class="p-3 text-center">
            <LoadingIndicator/>
        </div>
    }
    else if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger">@_errorMessage</Alert>
    }
    @if (HasLogs)
    {
        <pre><code id="logs">@_logContent</code></pre>
    }
    else
    {
        <div class="box">
            <p class="text-muted my-0">There are no logs, yet.</p>
        </div>
    }
    @if (HasLogs)
    {
        <div id="CtaContainer" class="container d-flex align-items-center justify-content-between">
            <button type="button" class="btn btn-primary w-100" data-clipboard-target="#logs">Copy logs</button>
        </div>
    }
</section>

@code {
    private bool _isLoading;
    private string? _logContent;
    private string? _errorMessage;

    private static LogEventLevel[] LogLevels => [LogEventLevel.Error, LogEventLevel.Warning, LogEventLevel.Information, LogEventLevel.Debug, LogEventLevel.Verbose];
    private bool HasLogs => !string.IsNullOrEmpty(_logContent);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _logContent = await LogService.GetLatestLogAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load logs: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task PersistLogLevel(LogEventLevel logLevel)
    {
        await ConfigProvider.Set("logLevel", logLevel, false);
    }
}
