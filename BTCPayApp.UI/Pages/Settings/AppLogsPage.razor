@attribute [Route(Routes.AppLogs)]
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Services
@using BTCPayApp.UI.Components.Layout
@using Serilog.Events
@inject ConfigProvider ConfigProvider
@inject LoggingService LogService
@inject IEmailService EmailService

<PageTitle>Application Logs</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Logs</h1>
        <SectionContent SectionId="Titlebar.End">
            <InputSelect @bind-Value="_logLevel" @bind-Value:after="LevelChanged" id="LogLevel" class="form-select form-select-sm px-2 py-1 w-auto" style="padding-right: var(--btcpay-space-l) !important;background-position-x:90%;">
                @foreach (var lvl in LoggingService.Levels)
                {
                    <option value="@lvl" selected="@(_logLevel == lvl)">@(lvl == LogEventLevel.Information ? "Info" : lvl)</option>
                }
            </InputSelect>
            <InputSelect @bind-Value="_logCount" @bind-Value:after="CountChanged" id="LogCount" class="form-select form-select-sm px-2 py-1 w-auto" style="padding-right: var(--btcpay-space-l) !important;background-position-x:90%;">
                @foreach (var count in Counts)
                {
                    <option value="@count" selected="@(_logCount == count)">@count</option>
                }
            </InputSelect>
        </SectionContent>
    </Titlebar>
</SectionContent>

<section class="container">
    @if (_isLoading)
    {
        <div class="p-3 text-center">
            <LoadingIndicator/>
        </div>
    }
    else if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger">@_errorMessage</Alert>
    }
    @if (HasLogs)
    {
        <div id="CtaContainer" class="container d-flex flex-column gap-3">
            <button type="button" class="btn btn-secondary" data-clipboard-target="#logs">Copy logs</button>
            <button type="button" class="btn btn-primary" @onclick="SendLogs">Send via email</button>
        </div>
        <pre><code id="logs">@_logContent</code></pre>
    }
    else
    {
        <div class="box">
            <p class="text-muted my-0">There are no logs, yet.</p>
        </div>
    }
</section>

@code {
    private bool _isLoading;
    private string? _logContent;
    private int _logCount = Counts.First();
    private string? _errorMessage;
    private LogEventLevel _logLevel = LogEventLevel.Information;
    private static readonly int[] Counts = [50, 100, 200, 500];
    private bool HasLogs => !string.IsNullOrEmpty(_logContent);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _logLevel = await ConfigProvider.Get<LogEventLevel?>("logLevel") ?? LogEventLevel.Information;
            await RefreshLogContent();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load logs: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LevelChanged()
    {
        await ConfigProvider.Set("logLevel", _logLevel, false);
        await RefreshLogContent();
    }

    private async Task CountChanged()
    {
        await RefreshLogContent();
    }

    private async Task RefreshLogContent()
    {
        _logContent = await LogService.GetLatestLogAsync(_logLevel, _logCount);
    }

    private async Task SendLogs()
    {
        await EmailService.SendAsync("App Log File", _logContent!, "app@btcpayserver.org");
    }
}
