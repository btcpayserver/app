@attribute [Route(Routes.StoreUsers)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Models
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject IAccountManager AccountManager
@inject IDispatcher Dispatcher

<PageTitle>Store Users</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Store Users</h1>
    </Titlebar>
</SectionContent>

<section class="container">
    <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="@StoreId">
        <Authorized>
            @if (Users is not null)
            {
                @if (Users.Any())
                {
                    <div class="user-list">
                        @foreach (var u in Users)
                        {
                            var status = UserHelper.GetUserStatus(u);
                            <a href="@Routes.StoreUserPath(StoreId, u.Id)" class="user-item box">
                                <div class="d-flex align-items-center gap-2">
                                    @if (!string.IsNullOrEmpty(u.ImageUrl))
                                    {
                                        <img src="@u.ImageUrl" alt="@(u.Name ?? u.Email)" class="profile-picture" />
                                    }
                                    else
                                    {
                                        <Icon Symbol="nav-account" class="profile-picture" />
                                    }
                                    <span class="fw-semibold">@u.Email</span>
                                    @if (!string.IsNullOrEmpty(u.Name))
                                    {
                                        <span class="text-muted">@u.Name</span>
                                    }
                                </div>
                                <div class="d-flex align-items-center justify-content-between gap-2">
                                    <span class="badge bg-info">@u.StoreRole</span>
                                    <span class="user-status badge bg-@status.Item2" text-translate="true">@status.Item1</span>
                                </div>
                            </a>
                        }
                    </div>
                }
                else if (!string.IsNullOrEmpty(Error))
                {
                    <Alert Type="danger">@Error</Alert>
                }
                else
                {
                    <div class="box">
                        <p class="text-muted my-0">There are no users, yet.</p>
                    </div>
                }
                if (_canInvite)
                {
                    <div id="CtaContainer" class="container d-flex align-items-center justify-content-between">
                        <a class="btn btn-primary w-100" href="@Routes.InviteStoreUserPath(StoreId)">Invite User</a>
                    </div>
                }
            }
            else if (Loading)
            {
                <div class="box">
                    <div class="p-3 text-center">
                        <LoadingIndicator/>
                    </div>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    [Parameter, EditorRequired]
    public string StoreId { get; set; } = null!;

    private bool _canInvite;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _canInvite = await AccountManager.IsAuthorized(Policies.CanCreateUser) || InstanceInfo?.RegistrationEnabled is true;

        Dispatcher.Dispatch(new StoreState.FetchUsers(StoreId));
    }

    private AppInstanceInfo? InstanceInfo => UIState.Value.Instance?.Data;
    private IEnumerable<StoreUserData>? Users => StoreState.Value.Users?.Data;
    private bool Loading => StoreState.Value.Users?.Loading is true;
    private string? Error => StoreState.Value.Users?.Error;
}
