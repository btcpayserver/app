@attribute [Route(Routes.ChangePassword)]
@using System.ComponentModel
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Components.Layout
@inject IAccountManager AccountManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Change Password</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Change Password</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            <h2>Password</h2>
            <ValidationEditContext Model="Model" OnValidSubmit="HandleValidSubmit" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage" class="box">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="CurrentPassword" class="form-label" data-required>Current Password</label>
                    <InputText @bind-Value="Model.CurrentPassword" type="password" id="CurrentPassword" class="form-control"/>
                    <ValidationMessage For="@(() => Model.CurrentPassword)" />
                </div>
                <div class="form-group">
                    <label for="NewPassword" class="form-label" data-required>New Password</label>
                    <InputText @bind-Value="Model.NewPassword" type="password" id="NewPassword" class="form-control"/>
                    <ValidationMessage For="@(() => Model.NewPassword)" />
                </div>
                <div class="form-group">
                    <label for="ConfirmPassword" class="form-label" data-required>Confirm Password</label>
                    <InputText @bind-Value="Model.ConfirmPassword" type="password" id="ConfirmPassword" class="form-control"/>
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </div>
                <div id="CtaContainer" class="container d-flex align-items-center justify-content-between">
                    <button type="submit" class="btn btn-primary w-100" disabled="@(_sending)">
                        @if (_sending)
                        {
                            <LoadingIndicator />
                        }
                        else
                        {
                            <span>Update Password</span>
                        }
                    </button>
                </div>
            </ValidationEditContext>
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private PasswordModel Model { get; set; } = new ();
    private bool _sending;
    private string? _errorMessage;
    private string? _successMessage;

    public async Task HandleValidSubmit()
    {
        _errorMessage = _successMessage = null;
        _sending = true;

        var result = await AccountManager.ChangePassword(Model!.CurrentPassword!, Model.NewPassword!);
        _sending = false;

        if (result.Succeeded)
        {
            Model = new PasswordModel();
            _successMessage = string.Join(",", result.Messages ?? ["Your password has been changed."]);
        }
        else
        {
            _errorMessage = string.Join(",", result.Messages ?? ["Changing your password failed."]);
        }
    }

    private class PasswordModel
    {
        [Required, DataType(DataType.Password), DisplayName("Current Password")]
        public string? CurrentPassword { get; set; }

        [Required, DataType(DataType.Password), DisplayName("New Password")]
        public string? NewPassword { get; set; }

        [Required, DataType(DataType.Password), DisplayName("New Password Confirmation")]
        [Compare("NewPassword", ErrorMessage = "The password and its confirmation do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
