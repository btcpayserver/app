@attribute [Route(Routes.WalletSettings)]
@layout BaseLayout
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.UI.Features
@using Microsoft.AspNetCore.SignalR.Client
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Auth
@using Microsoft.Extensions.Logging
@using BTCPayApp.UI.Components.Layout
@using BTCPayServer.Client.Models
@using Newtonsoft.Json.Linq
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject OnChainWalletManager OnChainWalletManager
@inject IState<RootState> State
@inject ILogger<IndexPage> Logger
@inject IAccountManager AccountManager
<PageTitle>Onchain Wallet</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Onchain Wallet</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    @if (OnChainWalletManager.IsConfigured)
    {
        var config = OnChainWalletManager.WalletConfig!;
        <h3>Network: @config.Network</h3>
        <p>Fingerprint: <code>@config.Fingerprint</code></p>
        <button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#seed" aria-expanded="false" aria-controls="seed">
            Show seed
        </button>
        <div id="seed" class="collapse">
            <div class="box p-4 mt-3">
                <ol class="m-0">
                    @foreach (var word in config.Mnemonic.Split(' '))
                    {
                        <li class="font-monospace">@word</li>
                    }
                </ol>
            </div>
        </div>

        <h3 class="mt-4">Derivations</h3>
        @foreach (var d in config.Derivations)
        {
            var identifier = d.Value.Identifier;
            var descriptor = d.Value.Descriptor;
            var isStorePaymentMethod = IsStorePaymentMethodId(identifier);
            <div class="box mb-3">
                <h4>@(d.Value.Name)</h4>
                @if (!string.IsNullOrEmpty(identifier))
                {
                    <div class="form-floating">
                        <TruncateCenter Text="@identifier" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext" />
                        <label>Identifier</label>
                    </div>
                }
                @if (!string.IsNullOrEmpty(descriptor))
                {
                    <div class="form-floating">
                        <TruncateCenter Text="@descriptor" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext" />
                        <label>Descriptor</label>
                    </div>
                    @if (isStorePaymentMethod is false)
                    {
                        <button class="btn btn-primary" @onclick="() => SetStorePaymentMethod(d.Key)">
                            Set as onchain payment method for store "@Store!.Name"
                        </button>
                    }
                }
            </div>
        }
    }
    else
    {
        <ul>
            <li>Connection state: @State.Value.ConnectionState</li>
            <li>Onchain wallet state: @State.Value.OnchainWalletState</li>
        </ul>
    }
</section>

@code {
    private bool CanConfigureWallet =>
        State.Value.OnchainWalletState == OnChainWalletState.NotConfigured &&
        State.Value.ConnectionState == HubConnectionState.Connected;
    private AppUserStoreInfo? Store => AccountManager.GetCurrentStore();
    private string? _storePaymentMethodIdentifier;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetStorePaymentMethod();
    }

    private async Task GetStorePaymentMethod()
    {
        var storeId = Store?.Id;
        var pmId = OnChainWalletManager.PaymentMethodId;
        if (string.IsNullOrEmpty(storeId) || CanConfigureWallet) return;
        try
        {
            var pm = await AccountManager.GetClient().GetStorePaymentMethod(storeId, pmId, true);
            if (pm?.Config is JObject configObj && configObj.TryGetValue("accountDerivation", out var derivationSchemeToken) && derivationSchemeToken.Value<string>() is {} derivationScheme)
            {
                _storePaymentMethodIdentifier = derivationScheme;
            }
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Payment method {PaymentMethodId} unset for store {StoreId}", pmId, storeId);
        }
    }

    private async Task SetStorePaymentMethod(string key)
    {
        var pmId = OnChainWalletManager.PaymentMethodId;
        var storeId = AccountManager.GetCurrentStore()?.Id;
        try
        {
            if (storeId is null || OnChainWalletManager.WalletConfig?.Derivations.TryGetValue(key, out var derivation) is not true || derivation.Descriptor is null) return;
            await AccountManager.GetClient().UpdateStorePaymentMethod(storeId, pmId, new UpdatePaymentMethodRequest
            {
                Enabled = true,
                Config = derivation.Descriptor
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error setting payment method {PaymentMethodId} for store {StoreId}", pmId, storeId);
        }
    }

    private bool? IsStorePaymentMethodId(string identifier)
    {
        return !string.IsNullOrEmpty(identifier) && !string.IsNullOrEmpty(_storePaymentMethodIdentifier)
                ? identifier.Contains(_storePaymentMethodIdentifier)
                : null;
    }
}
