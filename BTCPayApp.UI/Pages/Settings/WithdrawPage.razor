@attribute [Route(Routes.Withdraw)]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.UI.Components.Layout
@using NBitcoin
@using BTCPayApp.Core.Data
@using BTCPayServer.Lightning
@using NBitcoin.Crypto
@inject LightningNodeManager LightningNodeManager
@inject IState<RootState> State

<PageTitle>Withdraw</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Withdraw</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    @if (State.Value.LightningNodeState is LightningNodeState.Loaded)
    {
        <article class="my-4">
            <h3>Payments</h3>
            @if (_payments?.Any() is true)
            {
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                        <tr>
                            <th></th>
                            <th>Payment Hash</th>
                            <th>Inbound</th>
                            <th>Id</th>
                            <th>Preimage</th>
                            <th>Secret</th>
                            <th>Timestamp</th>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Invoices</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var payment in _payments)
                        {
                            <tr>
                                <td>
                                    @if (payment.Status == LightningPaymentStatus.Pending)
                                    {
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => Cancel(payment)">Cancel</button>
                                    }

                                </td>
                                <td>@payment.PaymentHash</td>
                                <td>@payment.Inbound</td>
                                <td>@payment.PaymentId</td>
                                <td>@payment.Preimage</td>
                                <td>@payment.Secret</td>
                                <td>@payment.Timestamp</td>
                                <td>@payment.Value</td>
                                <td>@payment.Status</td>
                                <td>@payment.PaymentRequest</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <p class="text-muted">There are no payments, yet.</p>
            }

            <div>

                <div class="input-group">
                    <input type="number" class="form-control" min="0" @bind="paymentRequestAmt" placeholder="sats"/>
                    <button type="button" class=" btn btn-primary" @onclick="ReceivePayment">Receive payment</button>
                </div>


                <div class="input-group">
                    <input type="number" class="form-control" placeholder="explicit amount in sats, optional" min="0" @bind="paymentRequestAmt"/>
                    <input type="text"class="form-control" placeholder="bolt11" @bind="paymentRequestSend"/>
                    <button type="button" class=" btn btn-primary" @onclick="SendPayment">Send payment</button>
                </div>


                @if (paymentResponse is not null)
                {
                    <p>@paymentResponse</p>
                }
            </div>
        </article>
        <button class="btn btn-outline-primary" type="button" @onclick="FetchData">Refresh data</button>
    }
    else if (Loading)
    {
        <span>loading...</span>
    }
</section>

@code {
    private List<AppLightningPayment>? _payments;
    private LDKNode? Node => LightningNodeManager.Node;
    private decimal? paymentRequestAmt;
    private string? paymentRequestSend;
    private string? paymentResponse;
    private bool Loading { get; set; }
    private SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _ = FetchData();
    }

    private async Task FetchData()
    {
        await Wrap(async () =>
        {
            if (Node is null) return;
            _payments = await Node.PaymentsManager.List(payments => payments);
        });
    }

    private async void ReceivePayment()
    {
        if (paymentRequestSend is null) return;
        await Wrap(async () =>
        {
            try
            {
                var hash = new uint256(Hashes.SHA256(RandomUtils.GetBytes(32)));
                var result = await Node.PaymentsManager.RequestPayment(LightMoney.Satoshis(paymentRequestAmt ?? 0), TimeSpan.FromDays(1), hash);

                paymentResponse = $"Payment request created: {result.PaymentRequest}";
                paymentRequestAmt = null;
            }
            catch (Exception e)
            {
                paymentResponse = $"Error: {e.Message}";
            }
        });
    }

    private async void SendPayment()
    {
        if (paymentRequestSend is null) return;
        await Wrap(async () =>
        {
            try
            {
                var invoice = BOLT11PaymentRequest.Parse(paymentRequestSend, Node.Network);
                var result = await Node.PaymentsManager.PayInvoice(invoice, paymentRequestAmt is null ? null : LightMoney.Satoshis((long) paymentRequestAmt.Value));
                paymentResponse = $"Payment {result.PaymentId} sent with status {result.Status}";
                paymentRequestAmt = null;
                paymentRequestSend = null;
            }
            catch (Exception e)
            {
                paymentResponse = $"Error: {e.Message}";
            }
        });
    }

    private async Task Wrap(Func<Task> action)
    {
        if (Loading) return;
        try
        {
            Loading = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();
            await action();
        }
        finally
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
            _semaphore.Release();
        }
    }

    private async Task Cancel(AppLightningPayment payment)
    {
        await Wrap(async () =>
        {
            await Node.PaymentsManager.Cancel(payment);
        });
    }

}