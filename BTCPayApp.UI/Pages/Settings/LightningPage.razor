@attribute [Route(Routes.LightningSettings)]
@layout BaseLayout
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Data
@using Microsoft.Extensions.Logging
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Auth
@using BTCPayServer.Client.Models
@using Newtonsoft.Json.Linq
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject LightningNodeManager LightningNodeManager
@inject IState<RootState> State
@inject ILogger<IndexPage> Logger
@inject IAccountManager AccountManager

<PageTitle>Lightning Node</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Lightning Node</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    @if (State.Value.LightningNodeState is LightningNodeState.Error)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error</h4>
            <p>There was an error with the lightning node. Please try again later.</p>
        </div>
    }
    @if (LightningNodeManager.CanConfigureLightningNode)
    {
        <button class="btn btn-primary" @onclick="ConfigureLNWallet">Configure Lightning Wallet</button>
    }
    else if (State.Value.LightningNodeState is LightningNodeState.Loaded or LightningNodeState.Init or LightningNodeState.Error or LightningNodeState.Stopped)
    {
        @if (Node is not null)
        {
            <div class="form-floating">
                <TruncateCenter Text="@Node.NodeId.ToString()" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Node ID</label>
            </div>
              <div class="form-floating">
                <select class="form-select" @onchange="OnSelectLSP" value="@_config.JITLSP" >
                    <option value="">None</option>
                    @foreach (var jit in JITOptions)
                    {
                        <option value="@jit">@jit</option>
                    }
                </select>
                <label>JIT LSP</label>
            </div>
        }

        @if (!string.IsNullOrEmpty(_config?.LightningDerivationPath))
        {
            <div class="form-floating">
                <TruncateCenter Text="@_config.LightningDerivationPath" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Derivation Path</label>
            </div>
        }

        @if (!string.IsNullOrEmpty(ConnectionString))
        {
            <div class="form-floating">
                <TruncateCenter Text="@ConnectionString" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Connection String</label>
            </div>
            @if (ConfiguredConnectionString != ConnectionString)
            {
                <button class="btn btn-primary" @onclick="SetStoreLNWallet">Set as Store Payment Method</button>
            }
        }
        <div class="d-grid d-sm-flex flex-wrap gap-3 buttons my-4">
            @if (State.Value.LightningNodeState is LightningNodeState.Init or LightningNodeState.Stopped or LightningNodeState.Error)
            {
                <button class="btn btn-secondary" type="button" @onclick="LightningNodeManager.StartNode">START</button>
            }
            else if (State.Value.LightningNodeState is LightningNodeState.Loaded)
            {
                <button class="btn btn-outline-warning" type="button" @onclick="LightningNodeManager.StopNode">STOP</button>
            }
            <button class="btn btn-outline-danger" type="button" @onclick="LightningNodeManager.CleanseTask">DESTROY</button>
        </div>
    }
</section>

@code {
    private LightningConfig? _config;
    private LDKNode? Node => LightningNodeManager.Node;

    private string? ConfiguredConnectionString;
    private string ConnectionString => LightningNodeManager.ConnectionString;
    private string[] JITOptions;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (LightningNodeManager?.Node is not null)
        {
            _config = await LightningNodeManager.Node.GetConfig();
            JITOptions = await LightningNodeManager.Node.GetJITLSPs();
        }
        var acc = AccountManager.GetAccount();
        if (acc?.CurrentStoreId != null)
        {
            try
            {
                var pm = await AccountManager.GetClient().GetStorePaymentMethod(acc.CurrentStoreId, "BTC-LN", true);
                if(

                    pm?.Config is JObject configObj &&
                    configObj.TryGetValue("connectionString", out var configuredConnectionStringToken) &&
                    configuredConnectionStringToken.Value<string>() is {} configuredConnectionString)
                {
                    ConfiguredConnectionString = configuredConnectionString;
                }
                else
                {
                    ConfiguredConnectionString = null;
                }
            }
            catch (Exception e)
            {
                ConfiguredConnectionString = null;
            }
        }
    }

    private async Task SetStoreLNWallet()
    {

        var acc = AccountManager.GetAccount();
        if (acc?.CurrentStoreId != null)
        {
            var pm = await  AccountManager.GetClient().UpdateStorePaymentMethod(acc.CurrentStoreId, "BTC-LN", new UpdatePaymentMethodRequest
            {
                Enabled = true,
                Config = new JObject
                {
                    ["connectionString"] = ConnectionString
                }
            });
            if (pm?.Config is JObject configObj &&
                configObj.TryGetValue("connectionString", out var configuredConnectionStringToken) &&
                configuredConnectionStringToken.Value<string>() is {} configuredConnectionString)
            {
                ConfiguredConnectionString = configuredConnectionString;
            }
        }
    }

    private async Task ConfigureLNWallet()
    {
        try
        {
            await LightningNodeManager.Generate();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error configuring LN wallet");
        }
    }

    private async Task OnSelectLSP(ChangeEventArgs obj)
    {
        
        _config = await LightningNodeManager.Node.GetConfig();
        _config.JITLSP = obj.Value?.ToString();
        await LightningNodeManager.Node.UpdateConfig(_config);
    }

}
