@attribute [Route(Routes.Pairing)]
@using BTCPayApp.Core
@using ReactorBlazorQRCodeScanner
@using Microsoft.Extensions.Logging
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Backup
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.UI.Components.Layout
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager
@inject BTCPayConnectionManager ConnectionManager
@inject SyncService SyncService
@inject IJSRuntime JS
@inject ILogger<QrScanModal> Logger
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="!NeedsEncryptionKey">
        <h1>@GetTitle()</h1>
        @if (NeedsEncryptionKey) {
            <SectionContent SectionId="Titlebar.End">
                <a class="btn-icon" href="@Routes.Settings">
                    <Icon Symbol="cross"/>
                </a>
            </SectionContent>
        }
    </Titlebar>
</SectionContent>

<section class="container @(NeedsEncryptionKey ? "" : "no-cta")">
    @if (NeedsEncryptionKey)
    {
        <style>#NavbarBottom { display: none; } #NavbarBottom ~ #MainContent { --cta-container-bottom: 0; }</style>
        <p class="text-center">
            Open Settings > Security > Device Pairing on your primary device and scan or enter your encryption key.
        </p>
        <div class="box my-4 mx-auto">
            <ValidationEditContext @ref="_validationEditContext" Model="@Model" OnValidSubmit="HandleValidSubmit" ErrorMessage="@_errorMessage">
                <div hidden="@(_enterManually is true)">
                    <QRCodeScanner/>
                </div>
                <div hidden="@(_enterManually is false)">
                    <div class="mb-3">
                        <label for="EncryptionKey" class="form-label">Encryption Key or Recovery Phrase</label>
                        <InputText @bind-Value="Model.EncryptionKey" id="EncryptionKey" class="form-control flex-grow-1" placeholder="Retrieve from your master device" autocomplete="off"/>
                        <ValidationMessage For="@(() => Model.EncryptionKey)"/>
                    </div>
                </div>
                <div id="CtaContainer" class="container d-flex align-items-center justify-content-between" hidden="@(_enterManually is false)">
                    <button type="submit" class="btn btn-primary w-100" disabled="@(!IsValidKey)">Unlock</button>
                </div>
            </ValidationEditContext>
        </div>
        <button type="button" class="btn btn-secondary rounded-pill d-flex w-100 align-items-center justify-content-center gap-1 mt-4" @onclick="() => { _enterManually = !_enterManually; }">
            <Icon Symbol="@(_enterManually is false ? "key" : "scan-qr")"/>
            @(_enterManually is false ? "Enter key manually" : "Scan QR code")
        </button>
    }
    else if (!string.IsNullOrEmpty(Model.EncryptionKey))
    {
        <AuthorizeView Policy="@AppPolicies.CanModifySettings">
            <Authorized>
                <p>
                    Scan this code with your new device to sync your wallet.
                </p>
                <QrCode Data="@EncryptionKeyWithDetails" class="qr-code rounded"/>
                <div class="box my-4 mx-auto">
                    <div class="form-floating form-group">
                        <TruncateCenter Text="@Model.EncryptionKey" Padding="10" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Your Encryption Key</label>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <Icon Symbol="info" class="mt-1" />
                    <span>
                        Save this encryption key in a secure password manager.
                        You will need it to pair new devices or restore your wallet.
                    </span>
                </div>
            </Authorized>
            <NotAuthorized>
                <Alert Type="danger">Unauthorized.</Alert>
            </NotAuthorized>
        </AuthorizeView>
    }
</section>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private ValidationEditContext? _validationEditContext;
    private EncryptionKeyModel Model { get; } = new ();
    private string? _errorMessage;
    private string? _qrInput;
    private bool? _enterManually;

    private class EncryptionKeyModel
    {
        [Required]
        public string? EncryptionKey { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model.EncryptionKey = await AccountManager.GetEncryptionKey();

        if (NeedsEncryptionKey)
            _enterManually = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && NeedsEncryptionKey)
            await ActivateQrScanner();
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        await base.DisposeAsyncCore(disposing);
        await DeactivateQrScanner();
    }

    private async Task ActivateQrScanner()
    {
        _qrCodeScannerJsInterop ??= new QRCodeScannerJsInterop(JS);
        await _qrCodeScannerJsInterop.Init(OnScan);
    }

    private async Task DeactivateQrScanner()
    {
        if (_qrCodeScannerJsInterop == null) return;
        await _qrCodeScannerJsInterop.StopRecording();
    }

    // ReSharper disable once AsyncVoidMethod
    private async void OnScan(string code)
    {
        // prevent duplicate submission due to quirk in QR reader lib
        if (code == _qrInput) return;
        _qrInput = code;
        Logger.LogInformation("Scanned QR code: {QrCode}", code);

        Model.EncryptionKey = code;
        StateHasChanged();

        await HandleValidSubmit();
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = null;
        try
        {
            var key = Model.EncryptionKey!.Split(Constants.EncryptionKeySeparator)[0];
            if (IsValidKey && await SyncService.SetEncryptionKey(key))
                NavigationManager.NavigateTo(Routes.Index);
            else
                _errorMessage = "Invalid encryption key";
        }
        catch (Exception e)
        {
            _errorMessage = "Invalid encryption key: " + e.Message;
        }
    }

    private string GetTitle() => NeedsEncryptionKey ? "Provide your encryption key" : "Pair another device";
    private bool NeedsEncryptionKey => ConnectionManager.ConnectionState == BTCPayConnectionState.WaitingForEncryptionKey;
    private bool IsValidKey => !string.IsNullOrEmpty(Model.EncryptionKey);
    private string? EncryptionKeyWithDetails
    {
        get
        {
            const string s = Constants.EncryptionKeySeparator;
            var account = AccountManager.Account;
            return Model.EncryptionKey is null
                ? null
                : account is null
                    ? Model.EncryptionKey
                    : $"{Model.EncryptionKey}{s}{account.BaseUri}{s}{account.Email}";
        }
    }

}
