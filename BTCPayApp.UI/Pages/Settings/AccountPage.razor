@attribute [Route(Routes.Account)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Models
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@using BTCPayServer.Client.Models
@inject IState<UserState> UserState
@inject IActionSubscriber ActionSubscriber
@inject IAccountManager AccountManager
@inject IDispatcher Dispatcher
@inject IDataDirectoryProvider DataDirectoryProvider
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Update Account</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Update Account</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="HandleValidSubmit" SuccessMessage="@_successMessage" ErrorMessage="@Error" enctype="multipart/form-data" class="box">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label for="Email" class="form-label" data-required>Email</label>
                    <InputText @bind-Value="Model.Email" id="Email" type="email" class="form-control"/>
                    <ValidationMessage For="@(() => Model.Email)"/>
                </div>
                <div class="form-group">
                    <label for="Name" class="form-label">Name</label>
                    <InputText @bind-Value="Model.Name" id="Name" class="form-control"/>
                    <ValidationMessage For="@(() => Model.Name)"/>
                </div>
                <div class="form-group">
                    <div class="d-flex align-items-center justify-content-between gap-2">
                        <label for="ProfilePicture" class="form-label">Profile Picture</label>
                        @if (!string.IsNullOrEmpty(Model.ImageUrl))
                        {
                            <button type="button" class="btn btn-link p-0 text-danger" @onclick="UnsetProfilePicture">
                                <Icon Symbol="cross"/> Remove
                            </button>
                        }
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <InputFile OnChange="@LoadProfilePicture" @key="@_inputFileId" id="ProfilePicture" class="form-control" accept="image/*"/>
                        @if (!string.IsNullOrEmpty(Model.ImageUrl))
                        {
                            <img src="@Model.ImageUrl" alt="Profile picture" class="profile-picture"/>
                        }
                    </div>
                    <ValidationMessage For="@(() => Model.ImageUrl)"/>
                </div>
                <div id="CtaContainer" class="container d-flex align-items-center justify-content-between">
                    <button type="submit" class="btn btn-primary w-100" disabled="@(_validationEditContext!.Invalid || Sending)">
                        @if (Sending)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Update Account</span>
                        }
                    </button>
                </div>
            </ValidationEditContext>
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private ValidationEditContext? _validationEditContext;
    private AccountModel Model { get; set; } = new();
    private string? _errorMessage;
    private string? _successMessage;
    private Guid _inputFileId = Guid.NewGuid();
    private AppUserInfo? User => UserState.Value.Info?.Data;
    private bool Sending => UserState.Value.Info?.Sending is true;
    private string? Error => _errorMessage ?? UserState.Value.Info?.Error;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ActionSubscriber.SubscribeToAction<UserState.SetInfo>(this, action =>
        {
            if (action.Info == null) return;
            UpdateModel(action.Info);
            InvokeAsync(StateHasChanged);
        });

        ActionSubscriber.SubscribeToAction<UserState.UpdatedUser>(this, action =>
        {
            if (action.UserData == null || action.Error != null)
                _errorMessage = action.Error ?? "An error occurred while updating your account information.";
            else
            {
                UpdateModel(action.UserData);
                _successMessage = "Your account information has been changed.";
                // refresh account manager
                AccountManager.CheckAuthenticated(true);
            }
            InvokeAsync(StateHasChanged);
        });

        if (User != null)
            UpdateModel(User);
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        ActionSubscriber.UnsubscribeFromAllActions(this);

        return ValueTask.CompletedTask;
    }

    private void UpdateModel(AppUserInfo? user)
    {
        Model = new AccountModel
        {
            Email = user?.Email,
            Name = user?.Name,
            ImageUrl = user?.ImageUrl
        };
    }

    private void UpdateModel(ApplicationUserData? user)
    {
        Model = new AccountModel
        {
            Email = user?.Email,
            Name = user?.Name,
            ImageUrl = user?.ImageUrl
        };
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = _successMessage = null;

        try
        {
            if (!string.IsNullOrEmpty(Model.ImagePath))
            {
                var path = Model.ImagePath;
                var mimeType = FileHelper.GetContentType(path);
                await AccountManager.GetClient().UploadCurrentUserProfilePicture(path, mimeType);
                // cleanup
                File.Delete(path);
                Model.ImagePath = null;
                _inputFileId = Guid.NewGuid();
            }
            else if (string.IsNullOrEmpty(Model.ImageUrl))
            {
                await AccountManager.GetClient().DeleteCurrentUserProfilePicture();
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            return;
        }

        // Don't pass image URL, if it changed it got set by the upload above
        Dispatcher.Dispatch(new UserState.UpdateUser(new UpdateApplicationUserRequest
        {
            Email = Model.Email,
            Name = Model.Name
        }));
    }

    private async Task LoadProfilePicture(InputFileChangeEventArgs e)
    {
        if (e.File.Size > 2000000)
        {
            Model.ImagePath = null;
            _errorMessage = "The profile picture file size should not exceed 2 MB.";
            _inputFileId = Guid.NewGuid();
            return;
        }
        try
        {
            var appData = await DataDirectoryProvider.GetAppDataDirectory();
            var fileName = e.File.Name;
            var dirPath = Path.Combine(appData, "tmp");
            var filePath = Path.Combine(dirPath, fileName);
            Directory.CreateDirectory(dirPath);

            await using FileStream fs = new(filePath, FileMode.Create);
            await e.File.OpenReadStream().CopyToAsync(fs);
            await fs.FlushAsync();
            Model.ImagePath = filePath;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Profile picture could not be applied: {ex.Message}";
        }
    }

    private void UnsetProfilePicture()
    {
        Model.ImageUrl = null;
        Model.ImagePath = null;
        _inputFileId = Guid.NewGuid();
    }

    private class AccountModel
    {
        [Required, EmailAddress]
        public string? Email { get; set; }
        public string? Name { get; set; }
        [Url]
        public string? ImageUrl { get; set; }
        public string? ImagePath { get; set; }
    }
}
