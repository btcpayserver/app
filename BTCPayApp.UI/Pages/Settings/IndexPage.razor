@attribute [Route(Routes.Settings)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Contracts
@using BTCPayApp.UI.Features
@using BTCPayServer.Client
@using Microsoft.AspNetCore.SignalR.Client
@using Plugin.Fingerprint.Abstractions
@inject IState<RootState> State
@inject IState<UIState> UiState
@inject IDispatcher Dispatcher
@inject IConfigProvider ConfigProvider
@inject IAccountManager AccountManager
@inject IFingerprint Fingerprint
@inject IState<UIState> UIState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Settings</PageTitle>

@if (_account != null && _userInfo != null)
{
    <section class="container py-4">
        <header class="d-flex align-items-center justify-content-between gap-3 mb-4">
            <h1>Settings</h1>
            @if (InstanceInfo?.CustomThemeExtension is null)
            {
                <div class="d-flex align-items-center gap-1">
                    @foreach (var theme in ThemeList)
                    {
                        <button type="button" class="btn-icon @(Model.Theme == theme ? "active" : null)" title="@theme" @onclick="() => SetTheme(theme)">
                            <Icon Symbol="@($"themes-{theme.ToLower()}")"/>
                        </button>
                    }
                </div>
            }
        </header>
        <a href="@Routes.User" class="box user mb-2">
            @if (!string.IsNullOrEmpty(_userInfo.ImageUrl))
            {
                <img src="@_userInfo.ImageUrl" alt="@(_userInfo.Name ?? _userInfo.Email)" class="profile-picture" />
            }
            else
            {
                <Icon Symbol="nav-account" class="profile-picture" />
            }
            <div>
                <h5>@(_userInfo.Name ?? _userInfo.Email)</h5>
                <span>@_userInfo.Email</span>
            </div>
            <Icon Symbol="caret-right"/>
        </a>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <a href="@Routes.NotificationSettings">
                        <Icon Symbol="nav-notifications"/>
                        <span>Notifications</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
            </ul>
        </div>

        <h2>Store</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                @{ var store = AccountManager.GetCurrentStore(); }
                @if (_userInfo.Stores?.Count() > 1 || AccountManager.GetCurrentStore() == null)
                {
                    <li class="list-group-item">
                        <a href="@Routes.SelectStore">
                            <Icon Symbol="nav-store"/>
                            <span>Select Store</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                }
                @if (store != null)
                {
                    <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="@store.Id">
                        <li class="list-group-item">
                            <a href="@Routes.StorePath(store.Id!)">
                                <Icon Symbol="nav-store"/>
                                <span>@store.Name</span>
                                <Icon Symbol="caret-right"/>
                            </a>
                        </li>
                        @if (store.PosAppId != null)
                        {
                            <li class="list-group-item">
                                <a href="@Routes.PosSettingsPath(store.PosAppId)">
                                    <Icon Symbol="nav-pointofsale"/>
                                    <span>Point of Sale</span>
                                    <Icon Symbol="caret-right"/>
                                </a>
                            </li>
                        }
                    </AuthorizeView>
                }
            </ul>
        </div>

        <h2>Bitcoin</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <a href="@Routes.WalletSettings">
                        <Icon Symbol="wallet-wallet"/>
                        <span>Onchain Wallet</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="@Routes.LightningSettings">
                        <Icon Symbol="lightning-node"/>
                        <span>Node Management</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="@Routes.ChannelsPeers">
                        <Icon Symbol="lightning-node"/>
                        <span>Channels and Peers</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="@Routes.Withdraw">
                        <Icon Symbol="payment-send"/>
                        <span>Withdraw</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
            </ul>
        </div>
    @*
        <h2>Security</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <a href="@Routes.ChangePasscode">
                        <Icon Symbol="key"/>
                        <span>@(HasPasscode ? "Change" : "Set") Passcode</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                @if (HasPasscode)
                {
                    <li class="list-group-item">
                        <button class="btn btn-link text-danger" type="button" @onclick="RemovePasscode">
                            <Icon Symbol="key" class="text-body"/>
                            <span class="me-auto">Remove passcode</span>
                        </button>
                    </li>
                }
            </ul>
        </div>
        *@

        <h2>Status</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <div class="justify-content-start">
                        <span class="m-2 btcpay-status btcpay-status--@(State.Value.ConnectionState switch { BTCPayConnectionState.ConnectedAsMaster or BTCPayConnectionState.ConnectedAsSlave => "enabled", BTCPayConnectionState.Disconnected => "disabled", _ => "pending" })"></span>
                        <span>Hub: @State.Value.ConnectionState</span>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="justify-content-start">
                        <span class="m-2 btcpay-status btcpay-status--@(State.Value.OnchainWalletState switch { OnChainWalletState.Loaded => "enabled", OnChainWalletState.Init => "disabled", _ => "pending" })"></span>
                        <span>Wallet: @State.Value.OnchainWalletState</span>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="justify-content-start">
                        <span class="m-2 btcpay-status btcpay-status--@(State.Value.LightningNodeState switch { LightningNodeState.Loaded => "enabled", LightningNodeState.Error => "disabled", _ => "pending" })"></span>
                        <span>Lightning: @State.Value.LightningNodeState</span>
                    </div>
                </li>
            </ul>
        </div>
    </section>
}

@code {
    private AppUserInfo? _userInfo;
    private BTCPayAccount? _account;
    private BTCPayAppConfig? _config;
    private bool? _biometricAuthAvailable;
    private SettingsModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model.Theme = UiState.Value.SelectedTheme;
        _userInfo = AccountManager.GetUserInfo();
        _account = AccountManager.GetAccount();
        _config = await ConfigProvider.Get<BTCPayAppConfig>(BTCPayAppConfig.Key);
        _biometricAuthAvailable = await Fingerprint.IsAvailableAsync();
    }

    // TODO: Guard with passcode entering
    private async Task RemovePasscode()
    {
        if (HasPasscode)
        {
            _config!.Passcode = null;
            await ConfigProvider.Set(BTCPayAppConfig.Key, _config, false);
        }
    }

    private void SetTheme(string theme)
    {
        Model.Theme = theme;
        Dispatcher.Dispatch(new UIState.ApplyUserTheme(Model.Theme));
    }

    private class SettingsModel
    {
        public string Theme { get; set; } = Themes.System;
    }

    private static string[] ThemeList => [Themes.System, Themes.Light, Themes.Dark];
    private bool HasPasscode => !string.IsNullOrEmpty(_config?.Passcode);
    private AppInstanceInfo? InstanceInfo => UIState.Value.Instance?.Data;
}
