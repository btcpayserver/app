@attribute [Route(Routes.Settings)]
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Models
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@using BTCPayServer.Client
@inject IState<RootState> State
@inject IState<UIState> UiState
@inject IDispatcher Dispatcher
@inject ConfigProvider ConfigProvider
@inject IAccountManager AccountManager
@inject IState<UserState> UserState
@inject BTCPayConnectionManager ConnectionManager
@inject IJSRuntime JS
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Settings</PageTitle>

@if (_account != null)
{
    <section class="container no-cta">
        <header class="d-flex align-items-center justify-content-between gap-3 my-4">
            <h1>Settings</h1>
            <AuthorizeView Policy="@AppPolicies.CanModifySettings">
                @if (InstanceInfo?.CustomThemeExtension is null)
                {
                    <div class="theme-switch">
                        @foreach (var theme in ThemeList)
                        {
                            <button type="button" class="btn-icon @(Model.Theme == theme ? "active" : null)" title="@theme" @onclick="() => SetTheme(theme)">
                                <Icon Symbol="@($"themes-{theme.ToLower()}")"/>
                            </button>
                        }
                    </div>
                }
            </AuthorizeView>
        </header>
        @if (CurrentUser != null)
        {
            <div class="box user mb-2 d-flex align-items-center justify-content-between gap-3 my-4">
                <AuthorizeView Policy="@AppPolicies.CanModifySettings">
                    <Authorized>
                        @if (CurrentStore != null)
                        {
                            <div class="d-inline-flex align-items-center p-0 gap-3">
                                <button class="d-inline-flex align-items-center btn btn-link text-body dropdown-toggle dropdown-toggle-no-caret p-0 gap-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <UserInfo Email="@CurrentUser.Email" Name="@CurrentUser.Name" ImageUrl="@CurrentUser.ImageUrl"/>
                                    <Icon Symbol="caret-down" class="text-muted"/>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><h6 class="dropdown-header">Switch to mode</h6></li>
                                    @foreach (var mode in new[] { "Cashier" })
                                    {
                                        <li>
                                            <button class="dropdown-item" type="button" @onclick="() => SwitchMode(mode)">@mode</button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <UserInfo Email="@CurrentUser.Email" Name="@CurrentUser.Name" ImageUrl="@CurrentUser.ImageUrl"/>
                        }
                    </Authorized>
                    <NotAuthorized>
                        <UserInfo Email="@CurrentUser.Email" Name="@CurrentUser.Name" ImageUrl="@CurrentUser.ImageUrl"/>
                        <span class="btn btn-link fw-semibold px-2 py-1 ms-auto" @onclick="SwitchBackToOwner">Switch back</span>
                    </NotAuthorized>
                </AuthorizeView>
                <div class="modal fade" id="ModeSwitchModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog">
                        <EditForm Model="SignInModel" OnValidSubmit="HandleValidSubmit" FormName="SwitchMode">
                            <div class="modal-content">
                                <div class="modal-header pb-0">
                                    <h1 class="modal-title fs-5">Switch back to admin mode</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                                        <Icon Symbol="close"/>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    @if (!string.IsNullOrEmpty(_errorMessage))
                                    {
                                        <Alert Type="danger">@_errorMessage</Alert>
                                    }
                                    <div hidden="@SignInModel.RequireTwoFactor">
                                        <label for="Password" class="form-label">Password</label>
                                        <InputText @bind-Value="SignInModel.Password" type="password" id="Password" autocomplete="current-password" class="form-control"/>
                                        <ValidationMessage For="@(() => SignInModel.Password)"/>
                                    </div>
                                    @if (SignInModel.RequireTwoFactor)
                                    {
                                        <div>
                                            <label for="TwoFactorCode" class="form-label">Two Factor Code</label>
                                            <InputText @bind-Value="SignInModel.TwoFactorCode" type="number" id="TwoFactorCode" autocomplete="one-time-code" class="form-control hide-number-spin"/>
                                            <ValidationMessage For="@(() => SignInModel.TwoFactorCode)"/>
                                        </div>
                                    }
                                </div>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-primary w-100">
                                        @if (_sending)
                                        {
                                            <LoadingIndicator />
                                        }
                                        else
                                        {
                                            <span>Switch back</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }

        <AuthorizeView Policy="@AppPolicies.CanModifySettings">
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    <li class="list-group-item">
                        <a href="@Routes.Account">
                            <Icon Symbol="nav-account"/>
                            <span>Account Details</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                    <li class="list-group-item">
                        <a href="@Routes.NotificationSettings">
                            <Icon Symbol="nav-notifications"/>
                            <span>Notifications</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                </ul>
            </div>
        </AuthorizeView>

        @if (!NeedsEncryptionKey)
        {
            <AuthorizeView Policy="@AppPolicies.CanModifySettings">
                <h2>Store</h2>
                <div class="box">
                    <ul class="list-group list-group-flush list-group-links">
                        @if (CurrentUser?.Stores?.Count() > 0 || CurrentStore == null)
                        {
                            <li class="list-group-item">
                                <a href="@Routes.SelectStore" class="@(CurrentStore != null ? "pt-1 pb-2" : "justify-content-start")">
                                    <Icon Symbol="nav-store"/>
                                    @if (CurrentStore == null)
                                    {
                                        <span>Select Store</span>
                                        <Icon Symbol="caret-right"/>
                                    }
                                    else
                                    {
                                        <div>
                                            <div>@CurrentStore.Name</div>
                                            <div class="text-muted">@CurrentStore.RoleId</div>
                                        </div>
                                        <span class="btn btn-link fw-semibold px-2 py-1 ms-auto">Select</span>
                                    }
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="list-group-item">
                                <a href="@Routes.CreateStore">
                                    <Icon Symbol="nav-store"/>
                                    <span>Create Store</span>
                                    <Icon Symbol="caret-right"/>
                                </a>
                            </li>
                        }
                        @if (CurrentStore != null)
                        {
                            <AuthorizeView Policy="@Policies.CanViewStoreSettings" Resource="@CurrentStore.Id" Context="store">
                                <li class="list-group-item">
                                    <a href="@Routes.StorePath(CurrentStore.Id)">
                                        <Icon Symbol="nav-store-settings"/>
                                        <span>Store Settings</span>
                                        <Icon Symbol="caret-right"/>
                                    </a>
                                </li>
                            </AuthorizeView>
                            <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="@CurrentStore.Id" Context="store">
                                <li class="list-group-item">
                                    <a href="@Routes.StoreUsersPath(CurrentStore.Id)">
                                        <Icon Symbol="nav-account"/>
                                        <span>Users</span>
                                        <Icon Symbol="caret-right"/>
                                    </a>
                                </li>
                                @if (CurrentStore.PosAppId != null)
                                {
                                    <li class="list-group-item">
                                        <a href="@Routes.PosSettingsPath(CurrentStore.PosAppId)">
                                            <Icon Symbol="nav-pointofsale"/>
                                            <span>Checkout</span>
                                            <Icon Symbol="caret-right"/>
                                        </a>
                                    </li>
                                }
                            </AuthorizeView>
                        }
                    </ul>
                </div>
            </AuthorizeView>

            <AuthorizeView Policy="@AppPolicies.CanModifySettings">
                <h2>Bitcoin</h2>
                <div class="box">
                    <ul class="list-group list-group-flush list-group-links">
                        <li class="list-group-item">
                            <a href="@Routes.WalletSettings">
                                <Icon Symbol="wallet-wallet"/>
                                <span>Onchain Wallet</span>
                                <Icon Symbol="caret-right"/>
                            </a>
                        </li>
                        <li class="list-group-item">
                            <a href="@Routes.LightningSettings">
                                <Icon Symbol="lightning-node"/>
                                <span>Lightning Node</span>
                                <Icon Symbol="caret-right"/>
                            </a>
                        </li>
                    </ul>
                </div>
            </AuthorizeView>
        }

        <AuthorizeView Policy="@AppPolicies.CanModifySettings">
            <h2>Security</h2>
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    <li class="list-group-item">
                        <a href="@Routes.Pairing">
                            <Icon Symbol="nav-transactions"/>
                            <span>Device pairing</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                    @*<li class="list-group-item">
                        <a href="@Routes.ChangePasscode">
                            <Icon Symbol="key"/>
                            <span>@(HasPasscode ? "Change" : "Set") Passcode</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>*@
                    <li class="list-group-item">
                        <a href="@Routes.ChangePassword">
                            <Icon Symbol="dots" class="p-2"/>
                            <span>Change Password</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                </ul>
            </div>

            <AuthorizeView Policy="@Policies.CanModifyServerSettings" Context="server">
                <h2>Server</h2>
                <div class="box">
                    <ul class="list-group list-group-flush list-group-links">
                        <li class="list-group-item">
                            <a href="@Routes.ServerUsers">
                                <Icon Symbol="nav-account"/>
                                <span>Users</span>
                                <Icon Symbol="caret-right"/>
                            </a>
                        </li>
                    </ul>
                </div>
            </AuthorizeView>

            <h2>Debug</h2>
            <div class="box mb-2">
                <ul class="list-group list-group-flush list-group-links">
                    <li class="list-group-item">
                        <div class="justify-content-start">
                            <span class="m-2 me-1 btcpay-status btcpay-status--@(State.Value.ConnectionState switch { BTCPayConnectionState.ConnectedAsPrimary or BTCPayConnectionState.ConnectedAsSecondary or BTCPayConnectionState.ConnectedFinishedInitialSync => "enabled", BTCPayConnectionState.Disconnected => "disabled", _ => "pending" })"></span>
                            <span>
                                Hub:
                                @(State.Value.ConnectionState switch
                                {
                                    BTCPayConnectionState.ConnectedAsPrimary => "Connected as primary device",
                                    BTCPayConnectionState.ConnectedAsSecondary => "Connected as secondary device",
                                    BTCPayConnectionState.ConnectedFinishedInitialSync => "Connected, initial sync finished",
                                    BTCPayConnectionState.WaitingForAuth => "Waiting for authentication",
                                    BTCPayConnectionState.WaitingForEncryptionKey => "Waiting for encryption key",
                                    _ => State.Value.ConnectionState.ToString()
                                })
                            </span>
                            @if (State.Value.ConnectionState == BTCPayConnectionState.ConnectedAsPrimary)
                            {
                                <button type="button" class="btn btn-link fw-semibold px-2 py-1 ms-auto" @onclick="SwitchToSecondary">
                                    <span>Switch to Secondary</span>
                                </button>
                            }
                        </div>
                    </li>
                    @if (InstanceInfo != null)
                    {
                        <li class="list-group-item">
                            <div class="justify-content-start">
                                <span class="m-2 me-1 btcpay-status btcpay-status--@(State.Value.ConnectionState switch { BTCPayConnectionState.ConnectedAsPrimary or BTCPayConnectionState.ConnectedAsSecondary or BTCPayConnectionState.ConnectedFinishedInitialSync => "enabled", BTCPayConnectionState.Disconnected => "disabled", _ => "pending" })"></span>
                                <span>
                                    Instance: @InstanceInfo.BaseUrl
                                    @if (!string.IsNullOrEmpty(InstanceInfo.ServerName))
                                    {
                                        @($"({InstanceInfo.ServerName})")
                                    }
                                </span>
                            </div>
                        </li>
                    }
                    @if (State.Value.ConnectionState == BTCPayConnectionState.ConnectedAsPrimary)
                    {
                        <li class="list-group-item">
                            <div class="justify-content-start">
                                <span class="m-2 me-1 btcpay-status btcpay-status--@(State.Value.OnchainWalletState switch { OnChainWalletState.Loaded => "enabled", OnChainWalletState.Init => "disabled", _ => "pending" })"></span>
                                <span>
                                    Wallet:
                                    @(State.Value.OnchainWalletState switch
                                    {
                                        OnChainWalletState.NotConfigured => "Not configured",
                                        OnChainWalletState.WaitingForConnection => "Waiting for connection",
                                        _ => State.Value.OnchainWalletState.ToString()
                                    })
                                </span>
                            </div>
                        </li>
                        <li class="list-group-item">
                            <div class="justify-content-start">
                                <span class="m-2 me-1 btcpay-status btcpay-status--@(State.Value.LightningNodeState switch { LightningNodeState.Loaded => "enabled", LightningNodeState.Error or LightningNodeState.Stopped=> "disabled", _ => "pending" })"></span>
                                <span>
                                    Lightning:
                                    @(State.Value.LightningNodeState switch
                                    {
                                        LightningNodeState.NotConfigured => "Not configured",
                                        LightningNodeState.WaitingForConnection => "Waiting for connection",
                                        _ => State.Value.LightningNodeState.ToString()
                                    })
                                </span>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    <li class="list-group-item">
                        <a href="@Routes.AppLogs">
                            <Icon Symbol="nav-notifications"/>
                            <span>App Logs</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                </ul>
            </div>
            <h2>Logout</h2>
            <div class="box">
                @switch (State.Value.ConnectionState)
                {
                    case BTCPayConnectionState.ConnectedAsPrimary:
                        <p>This device is currently connected as primary device for communication with the BTCPay Server.</p>
                        <p>Please note, that when you sign out of the account on this device, your Lightning node will go offline and you will not be able to receive any payments.</p>
                        break;
                    case BTCPayConnectionState.ConnectedAsSecondary:
                        <p>This device is currently connected as additional device for communication with the BTCPay Server.</p>
                        <p>Please ensure, that your primary device is still connected to the BTCPay Server, because otherwise you will not be able to receive any payments.</p>
                        break;
                }
                <button class="btn btn-outline-danger w-100 mt-2" type="button" @onclick="Logout">Logout</button>
            </div>
        </AuthorizeView>
    </section>
}

@code {
    private static string[] ThemeList => [Themes.System, Themes.Light, Themes.Dark];
    private BTCPayAccount? _account;
    private BTCPayAppConfig? _config;
    private SettingsModel Model { get; set; } = new();
    private SigninModel SignInModel { get; set; } = new();
    private bool HasPasscode => !string.IsNullOrEmpty(_config?.Passcode);
    private AppUserStoreInfo? CurrentStore => AccountManager.CurrentStore;
    private AppInstanceInfo? InstanceInfo => UiState.Value.Instance?.Data;
    private AppUserInfo? CurrentUser => UserState.Value.Info?.Data;
    private bool NeedsEncryptionKey => ConnectionManager.ConnectionState == BTCPayConnectionState.WaitingForEncryptionKey;
    private bool _sending;
    private string? _errorMessage;

    private class SettingsModel
    {
        public string Theme { get; set; } = Themes.System;
    }

    public class SigninModel
    {
        public bool RequireTwoFactor { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [RequiredIf(nameof(RequireTwoFactor), true)]
        public string? TwoFactorCode { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model.Theme = UiState.Value.SelectedTheme;
        _account = AccountManager.Account;
        _config = await ConfigProvider.Get<BTCPayAppConfig>(BTCPayAppConfig.Key);
    }

    private void SetTheme(string theme)
    {
        Model.Theme = theme;
        Dispatcher.Dispatch(new UIState.ApplyUserTheme(Model.Theme));
    }

    private async Task SwitchToSecondary()
    {
        if (!await AccountManager.IsAuthorized(AppPolicies.CanModifySettings)) return;
        _ = ConnectionManager.SwitchToSecondary();
    }

    private async Task SwitchMode(string mode)
    {
        if (string.IsNullOrEmpty(CurrentStore?.Id) || string.IsNullOrEmpty(mode) ||
            !await AccountManager.IsAuthorized(AppPolicies.CanModifySettings)) return;
        await AccountManager.SwitchMode(CurrentStore.Id, mode);
    }

    private async Task SwitchBackToOwner()
    {
        SignInModel = new SigninModel();
        await JS.InvokeVoidAsync("Interop.openModal", "#ModeSwitchModal");
    }

    private async Task HandleValidSubmit()
    {
        _errorMessage = null;
        _sending = true;

        await JS.InvokeVoidAsync("Interop.closeModal", "#ModeSwitchModal");
        var result = await AccountManager.SwitchToOwner(SignInModel.Password!, SignInModel.TwoFactorCode);
        _sending = false;
        if (!result.Succeeded)
        {
            await JS.InvokeVoidAsync("Interop.openModal", "#ModeSwitchModal");
            if (result.Messages?.Contains("RequiresTwoFactor") is true)
                SignInModel.RequireTwoFactor = true;
            else
                _errorMessage = result.Messages?.Contains("Failed") is false
                    ? string.Join(",", result.Messages)
                    : "Invalid login attempt.";
        }
    }

    private async Task Logout()
    {
        await AccountManager.Logout();
    }
}
