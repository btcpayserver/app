@attribute [Route(Routes.SelectStore)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Models
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Features
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager
@inject IState<UserState> UserState
@inject IDispatcher Dispatcher
@inject IActionSubscriber ActionSubscriber
<PageTitle>Select your store</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="@(!string.IsNullOrEmpty(_initialStoreId))">
        <h1>Select your store</h1>
    </Titlebar>
</SectionContent>

<section class="container mt-4">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (UserInfo is null)
            {
                if (Loading)
                {
                    <div class="p-3 text-center">
                        <LoadingIndicator/>
                    </div>
                }
                else if (!string.IsNullOrEmpty(Error))
                {
                    <Alert Type="danger">@Error</Alert>
                }
            }
            else if (Stores?.Any() is true)
            {
                if (string.IsNullOrEmpty(_initialStoreId))
                {
                    <p class="lead text-secondary mb-4 text-center">Select a store to begin accepting payments.</p>
                    <style>#NavbarBottom { display: none; } #NavbarBottom ~ #MainContent { --cta-container-bottom: 0; }</style>
                }
                <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="HandleValidSubmit" ErrorMessage="@Error">
                    <DataAnnotationsValidator />
                    <InputRadioGroup Name="StoreIds" @bind-Value="@Model.StoreId">
                        <ul class="list-group list-group-flush mb-3">
                            @foreach (var store in Stores)
                            {
                                <li class="list-group-item">
                                    <label class="form-check-label stretched-link d-flex flex-wrap align-items-center justify-content-between gap-2">
                                        <InputRadio Name="StoreIds" Value="@store.Id" class="form-check-input m-0"/>
                                        @if (string.IsNullOrEmpty(store.LogoUrl))
                                        {
                                            <Icon Symbol="nav-store"/>
                                        }
                                        else
                                        {
                                            <img src="@store.LogoUrl" alt="@store.Name" class="icon icon-nav-store"/>
                                        }
                                        <strong>@store.Name</strong>
                                        <span class="badge bg-light ms-auto">@store.RoleId</span>
                                    </label>
                                </li>
                            }
                        </ul>
                    </InputRadioGroup>
                    <div id="CtaContainer" class="container d-flex align-items-center justify-content-between">
                        <button class="btn btn-primary w-100" type="submit" data-testid="SelectStoreButton" disabled="@(_validationEditContext?.Invalid is true || string.IsNullOrEmpty(Model.StoreId) || _sending)">
                            @if (_sending)
                            {
                                <LoadingIndicator />
                            }
                            else
                            {
                                <span>Select Store</span>
                            }
                        </button>
                    </div>
                </ValidationEditContext>
                <p class="mt-4 text-secondary text-center">In case you want to start with a blank slate, you can also create a new store for the app.</p>
                <NavLink class="btn btn-outline-primary w-100" href="@GetCreateStoreUrl()" data-testid="CreateStoreButton">Create Store</NavLink>
            }
            else
            {
                <p class="text-secondary text-center">You don't have a store, yet.</p>
                <NavLink class="btn btn-primary w-100" href="@GetCreateStoreUrl()" data-testid="CreateStoreButton">Create Store</NavLink>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private string? _errorMessage;
    private string? _initialStoreId;
    private bool _sending;
    private ValidationEditContext? _validationEditContext;
    SelectStoreModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _initialStoreId = Model.StoreId = AccountManager.CurrentStore?.Id;

        ActionSubscriber.SubscribeToAction<UserState.SetInfo>(this, action =>
        {
            if (action.Info == null) return;
            InvokeAsync(HandleUpdate);
        });

        if (UserInfo != null)
            await HandleUpdate();
        else
            Dispatcher.Dispatch(new UserState.FetchInfo());
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        ActionSubscriber.UnsubscribeFromAllActions(this);

        return ValueTask.CompletedTask;
    }

    private async Task HandleUpdate()
    {
        if (Stores?.Any() is not true)
            NavigationManager.NavigateTo(Routes.CreateStore);
        else if (Stores?.Count() == 1)
            await SelectStore(Stores!.First().Id);
    }

    private async Task HandleValidSubmit()
    {
        await SelectStore(Model.StoreId!);
    }

    private async Task SelectStore(string storeId)
    {
        if (storeId == _initialStoreId)
        {
            NavigationManager.NavigateTo(Routes.Index);
            return;
        }

        _errorMessage = null;
        _sending = true;
        StateHasChanged();

        try
        {
            var result = await AccountManager.SetCurrentStoreId(storeId);
            if (!result.Succeeded)
            {
                _errorMessage = result.Messages != null
                    ? string.Join(",", result.Messages)
                    : "Store selection failed.";
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            _sending = false;
            StateHasChanged();
        }
    }

    private class SelectStoreModel
    {
        [Required]
        public string? StoreId { get; set; }
    }

    private AppUserInfo? UserInfo => UserState.Value.Info?.Data;
    private IEnumerable<AppUserStoreInfo>? Stores => UserInfo?.Stores;
    private bool Loading => UserState.Value.Info?.Loading is true;
    private string? Error => _errorMessage ?? UserState.Value.Info?.Error;
    private string GetCreateStoreUrl() => NavigationManager.GetUriWithQueryParameters(Routes.CreateStore, new Dictionary<string, object?> { {"backUrl", Routes.SelectStore } } );
}
