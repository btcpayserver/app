@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.UI.Features
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@using NBitcoin
@using AppItemStats = BTCPayServer.Client.Models.AppItemStats
@using AppSalesStats = BTCPayServer.Client.Models.AppSalesStats
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>
<section class="container py-4">
    <header class="d-flex align-items-center justify-content-between gap-3 mb-4 mt-n2">
        <AccountSwitch />
        <div class="notifications">
            @if (!string.IsNullOrEmpty(StoreId))
            {
                <NotificationsBell/>
            }
        </div>
    </header>
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success" Margin="0" Dismissible>@_successMessage</Alert>
    }
    <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="StoreId">
        <WalletOverview BitcoinBalance="@TotalBalance" BitcoinUnit="@BitcoinUnit" MoneyUnit="@UnitMoney" Histogram="@Histogram"
                        Currency="@Currency" Rate="@Rate" Error="@BalanceError" Loading="@BalanceLoading" OnBalanceClick="ToggleDisplayCurrency"
                        class="my-3"/>
        <div class="btn-group w-100 justify-content-center" role="group" aria-label="Period">
            <InputRadioGroup Name="HistogramPeriod" @bind-Value="@HistogramPeriod">
                <InputRadio Name="HistogramPeriod" Value="HistogramType.Day" class="btn-check" id="BalancePeriodDay"/>
                <label class="btn btn-link" for="BalancePeriodDay">1D</label>
                <InputRadio Name="HistogramPeriod" Value="HistogramType.Week" class="btn-check" id="BalancePeriodWeek"/>
                <label class="btn btn-link" for="BalancePeriodWeek">1W</label>
                <InputRadio Name="HistogramPeriod" Value="HistogramType.Month" class="btn-check" id="BalancePeriodMonth"/>
                <label class="btn btn-link" for="BalancePeriodMonth">1M</label>
                <InputRadio Name="HistogramPeriod" Value="HistogramType.YTD" class="btn-check" id="BalancePeriodYTD"/>
                <label class="btn btn-link" for="BalancePeriodYTD">YTD</label>
                <InputRadio Name="HistogramPeriod" Value="HistogramType.Year" class="btn-check" id="BalancePeriodYear"/>
                <label class="btn btn-link" for="BalancePeriodYear">1Y</label>
                <InputRadio Name="HistogramPeriod" Value="HistogramType.TwoYears" class="btn-check" id="BalancePeriodTwoYears"/>
                <label class="btn btn-link" for="BalancePeriodTwoYears">2Y</label>
            </InputRadioGroup>
        </div>
        @if (TotalBalance is > 0)
        {
            <div class="text-center mt-4 mb-5">
                <NavLink href="@Routes.Funds" class="bg-light rounded-pill px-5 py-2 fw-semibold">Send</NavLink>
            </div>
        }
    </AuthorizeView>
    <AuthorizeView Policy="@Policies.CanViewInvoices" Resource="StoreId">
        @if (InvoicesLoading || Invoices is not null)
        {
            <div class="invoices mt-5">
                <h2>Recent Invoices</h2>
                <InvoiceList Invoices="Invoices" Loading="InvoicesLoading" Error="@InvoicesError"/>
            </div>
        }
    </AuthorizeView>
    @if (PosAppId != null)
    {
        <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="StoreId">
            @if (PosSalesStatsLoading || PosSalesStats is not null)
            {
                <AppSalesStats AppId="@PosAppId" Stats="PosSalesStats" Loading="PosSalesStatsLoading" Error="@PosSalesStatsError" class="mt-5"/>
            }
            @if (PosItemStatsLoading || PosItemStats is not null)
            {
                <AppItemStats AppId="@PosAppId" Stats="PosItemStats" Loading="PosItemStatsLoading" Error="@PosItemStatsError" class="mt-5"/>
            }
        </AuthorizeView>
    }
</section>

@code {
    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private string? _successMessage;
    private Action? _updateChart;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }
    }

    private void ToggleDisplayCurrency()
    {
        Dispatcher.Dispatch(new UIState.ToggleBitcoinUnit());
    }

    private IEnumerable<InvoiceData>? Invoices => StoreState.Value.Invoices?.Data?.Take(5);
    private bool InvoicesLoading => StoreState.Value.Invoices?.Loading is true;
    private string? InvoicesError => StoreState.Value.Invoices?.Error;
    private AppUserStoreInfo? StoreInfo => StoreState.Value.StoreInfo;
    private string? StoreId => StoreInfo?.Id;
    private string? PosAppId => StoreInfo?.PosAppId;
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private bool BalanceLoading => StoreState.Value.OnchainBalance?.Loading is true || StoreState.Value.LightningBalance?.Loading is true;
    private string? BalanceError => StoreState.Value.OnchainBalance?.Error ?? StoreState.Value.LightningBalance?.Error;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private decimal? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private decimal? OnchainUnconfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.UnconfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private decimal? LightningOnchainBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (OnchainUnconfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private string BitcoinUnit => UIState.Value.BitcoinUnit;
    private HistogramType HistogramPeriod
    {
        get => UIState.Value.HistogramType;
        set => Dispatcher.Dispatch(new UIState.SetHistogramType(value));
    }

    private HistogramData? Histogram => StoreState.Value.UnifiedHistogram;
    private MoneyUnit UnitMoney => BitcoinUnit == CurrencyUnit.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;
    private LightMoneyUnit UnitLightMoney => BitcoinUnit == CurrencyUnit.BTC ? LightMoneyUnit.BTC : LightMoneyUnit.Satoshi;
    private bool PosSalesStatsLoading => StoreState.Value.PosSalesStats?.Loading is true;
    private bool PosItemStatsLoading => StoreState.Value.PosItemStats?.Loading is true;
    private AppSalesStats? PosSalesStats => StoreState.Value.PosSalesStats?.Data;
    private List<AppItemStats>? PosItemStats => StoreState.Value.PosItemStats?.Data;
    private string? PosSalesStatsError => StoreState.Value.PosSalesStats?.Error;
    private string? PosItemStatsError => StoreState.Value.PosItemStats?.Error;
}
