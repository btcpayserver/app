@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@using NBitcoin
@inject IState<StoreState> StoreState
@inject IAccountManager AccountManager
@inject DisplayFormatter DisplayFormatter
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>
<section class="container py-4">
    <header class="d-flex align-items-center justify-content-between gap-3 mb-4 mt-n2">
        <AccountSwitch />
        <div class="notifications">
            @if (!string.IsNullOrEmpty(StoreId))
            {
                <NotificationsBell/>
            }
        </div>
    </header>
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success" Margin="0" Dismissible>@_successMessage</Alert>
    }
    <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="StoreId">
        <div class="d-flex flex-column gap-4 wallet">
            @if (!string.IsNullOrEmpty(BalanceError))
            {
                <Alert Type="danger">@BalanceError</Alert>
            }
            else if (TotalBalance == null)
            {
                <div class="p-3 text-center">
                    <LoadingIndicator/>
                </div>
            }
            else
            {
                <div class="amount text-center">
                    <div class="sats fw-bold fs-1">@DisplayFormatter.Currency(TotalBalance.Value, "SATS", DisplayFormatter.CurrencyFormat.Symbol)</div>
                    @if (CurrencyValue.HasValue)
                    {
                        <div class="fiat fw-semibold text-muted">@DisplayFormatter.Currency(CurrencyValue.Value, Currency, DisplayFormatter.CurrencyFormat.Symbol)</div>
                    }
                </div>
            }
        </div>
    </AuthorizeView>

    @if (InvoicesLoading || Invoices is not null)
    {
        <div class="invoices">
            <h2>Recent Invoices</h2>
            <InvoiceList Invoices="Invoices" Loading="InvoicesLoading" Error="@InvoicesError"/>
        </div>
    }
</section>

@code {
    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }
    }

    private IEnumerable<InvoiceData>? Invoices => StoreState.Value.Invoices?.Data?.Take(5);
    private bool InvoicesLoading => StoreState.Value.Invoices?.Loading is true;
    private string? InvoicesError => StoreState.Value.Invoices?.Error;

    private string? StoreId => AccountManager.GetCurrentStore()?.Id;
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private string? BalanceError => StoreState.Value.OnchainBalance?.Error ?? StoreState.Value.LightningBalance?.Error;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private decimal? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).ToDecimal(MoneyUnit.Satoshi);
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private decimal? LightningOnchainBalance => LightningBalance?.OnchainBalance.Confirmed.ToDecimal(MoneyUnit.Satoshi);
    private decimal? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(LightMoneyUnit.Satoshi);
    private decimal? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private decimal? CurrencyValue => TotalBalance != null && Rate.HasValue && !string.IsNullOrEmpty(Currency)
        ? new Money(TotalBalance.Value, MoneyUnit.Satoshi).ToDecimal(MoneyUnit.BTC) * Rate.Value
        : null;
}
