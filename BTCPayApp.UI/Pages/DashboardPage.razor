@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Models
@using BTCPayApp.UI.Features
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@using NBitcoin
@using AppItemStats = BTCPayServer.Client.Models.AppItemStats
@using AppSalesStats = BTCPayServer.Client.Models.AppSalesStats
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject IAccountManager AccountManager
@inject ConfigProvider ConfigProvider
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>

<section class="container py-4">
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success" Margin="0" Dismissible class="mb-4">@_successMessage</Alert>
    }
    @if (string.IsNullOrEmpty(StoreId))
    {
        <Alert Type="info">Please configure a store first.</Alert>
    }
    else
    {
        <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="StoreId">
            <div class="notifications d-flex justify-content-end mb-n4">
                <NotificationsBell />
            </div>
            <WalletOverview Sats="@TotalBalance" Histogram="@Histogram" Currency="@DisplayCurrency" Rate="@Rate"
                            Error="@BalanceError" Loading="@BalanceLoading" OnBalanceClick="ToggleDisplayCurrency"
                            class="mt-4 mb-3"/>
            <div class="btn-group w-100 justify-content-center" role="group" aria-label="Period">
                <InputRadioGroup Name="HistogramPeriod" @bind-Value="@HistogramPeriod">
                    <InputRadio Name="HistogramPeriod" Value="HistogramType.Day" class="btn-check" id="BalancePeriodDay"/>
                    <label class="btn btn-link" for="BalancePeriodDay">1D</label>
                    <InputRadio Name="HistogramPeriod" Value="HistogramType.Week" class="btn-check" id="BalancePeriodWeek"/>
                    <label class="btn btn-link" for="BalancePeriodWeek">1W</label>
                    <InputRadio Name="HistogramPeriod" Value="HistogramType.Month" class="btn-check" id="BalancePeriodMonth"/>
                    <label class="btn btn-link" for="BalancePeriodMonth">1M</label>
                    <InputRadio Name="HistogramPeriod" Value="HistogramType.YTD" class="btn-check" id="BalancePeriodYTD"/>
                    <label class="btn btn-link" for="BalancePeriodYTD">YTD</label>
                    <InputRadio Name="HistogramPeriod" Value="HistogramType.Year" class="btn-check" id="BalancePeriodYear"/>
                    <label class="btn btn-link" for="BalancePeriodYear">1Y</label>
                    <InputRadio Name="HistogramPeriod" Value="HistogramType.TwoYears" class="btn-check" id="BalancePeriodTwoYears"/>
                    <label class="btn btn-link" for="BalancePeriodTwoYears">2Y</label>
                </InputRadioGroup>
            </div>
            @if (TotalBalance is > 0)
            {
                <div class="text-center my-5">
                    <NavLink href="@Routes.Withdraw" class="d-inline-flex align-items-center gap-1 fs-5 bg-light rounded-pill px-5 py-2 fw-semibold">
                        <span class="ps-2">Withdraw</span>
                        <Icon Symbol="caret-right" />
                    </NavLink>
                </div>
            }
            @if (!_config!.RecoveryPhraseVerified)
            {
                <div class="box d-flex gap-2 my-5">
                    <Icon Symbol="info" class="mt-1" />
                    <span>
                        Please take a moment to
                        <NavLink href="@Routes.WalletSeed">secure your recovery phrase</NavLink>.
                        This is important to ensure you can to access and restore your wallet.
                    </span>
                </div>
            }
            @if (PosAppId != null)
            {
                @if (PosSalesStatsLoading || PosSalesStats is not null)
                {
                    <AppSalesStats AppId="@PosAppId" Stats="PosSalesStats" Loading="PosSalesStatsLoading" Error="@PosSalesStatsError" class="mt-5"/>
                }
                @if (ShowPosItemStats)
                {
                    <AppItemStats AppId="@PosAppId" Stats="PosItemStats" Loading="PosItemStatsLoading" Error="@PosItemStatsError" class="mt-5"/>
                }
            }
        </AuthorizeView>
    }
</section>

@code {
    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private BTCPayAppConfig? _config;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _config = await ConfigProvider.Get<BTCPayAppConfig>(BTCPayAppConfig.Key) ?? new BTCPayAppConfig();
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }
    }

    private void ToggleDisplayCurrency()
    {
        Dispatcher.Dispatch(new UIState.ToggleDisplayCurrency());
    }

    private AppUserStoreInfo? StoreInfo => StoreState.Value.StoreInfo;
    private string? StoreId => AccountManager.CurrentStore?.Id;
    private string? PosAppId => StoreInfo?.PosAppId;
    private bool BalanceLoading => StoreState.Value.OnchainBalance?.Loading is true || StoreState.Value.LightningBalance?.Loading is true;
    private string? BalanceError => StoreState.Value.OnchainBalance?.Error ?? StoreState.Value.LightningBalance?.Error;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private long? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).Satoshi;
    private long? OnchainUnconfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.UnconfirmedBalance, MoneyUnit.BTC).Satoshi;
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private long? LightningOnchainBalance => LightningBalance?.OnchainBalance?.Confirmed.Satoshi;
    private long? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local == null? null : new Money(LightningBalance.OffchainBalance.Local.ToDecimal(LightMoneyUnit.BTC), MoneyUnit.BTC).Satoshi;
    private long? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (OnchainUnconfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private string DisplayCurrency => UIState.Value.DisplayCurrency;
    private HistogramType HistogramPeriod
    {
        get => UIState.Value.HistogramType;
        set => Dispatcher.Dispatch(new UIState.SetHistogramType(value));
    }
    private HistogramData? Histogram => StoreState.Value.UnifiedHistogram;
    private bool PosSalesStatsLoading => StoreState.Value.PosSalesStats?.Loading is true;
    private bool PosItemStatsLoading => StoreState.Value.PosItemStats?.Loading is true;
    private AppSalesStats? PosSalesStats => StoreState.Value.PosSalesStats?.Data;
    private List<AppItemStats>? PosItemStats => StoreState.Value.PosItemStats?.Data;
    private string? PosSalesStatsError => StoreState.Value.PosSalesStats?.Error;
    private string? PosItemStatsError => StoreState.Value.PosItemStats?.Error;
    private bool ShowPosItemStats => PosItemStats is not null && PosItemStats is not [{ Title: "Keypad" }];
}
