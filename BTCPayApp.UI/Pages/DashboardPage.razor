@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@using BTCPayServer.Services
@using NBitcoin
@inject IState<RootState> State
@inject IState<StoreState> StoreState
@inject IAccountManager AccountManager
@inject OnChainWalletManager OnChainWalletManager
@inject DisplayFormatter DisplayFormatter
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>

<header class="container d-flex align-items-center justify-content-between py-2">
    <div class="d-flex align-items-center justify-content-between gap-2">
        <AccountSwitch />
    </div>
    <div class="notifications">
        @if (!string.IsNullOrEmpty(StoreId))
        {
            <NotificationsBell/>
        }
    </div>
</header>
@if (!string.IsNullOrEmpty(_successMessage))
{
    <section class="container py-3">
        <Alert Type="success" Margin="0" Dismissible>@_successMessage</Alert>
    </section>
}
@if (State.Value.OnchainWalletState == OnChainWalletState.Loaded)
{
    <AuthorizeView Policy="@Policies.CanViewStoreSettings" Resource="StoreId">
        <section class="container d-flex flex-column gap-4 wallet">
            @if (_balance == null)
            {
                <div class="p-3 text-center">
                    <LoadingIndicator/>
                </div>
            }
            else
            {
                <div class="amount text-center">
                    <div class="sats fw-bold fs-1">@_balance.ToUnit(MoneyUnit.Satoshi) sats</div>
                    @if (CurrencyValue.HasValue)
                    {
                        <div class="fiat fw-semibold text-muted">@DisplayFormatter.Currency(CurrencyValue.Value, Currency, DisplayFormatter.CurrencyFormat.Symbol)</div>
                    }
                </div>
                <nav class="d-flex flex-wrap align-items-center gap-3 mx-auto">
                    <a class="btn btn-light rounded-pill" href="@Routes.WalletSend">
                        <Icon Symbol="payment-send"/>
                        <span>Send</span>
                    </a>
                    <a class="btn btn-light rounded-pill" href="@Routes.WalletReceive">
                        <Icon Symbol="payment-receive"/>
                        <span>Receive</span>
                    </a>
                </nav>
            }
        </section>
    </AuthorizeView>
}

@if (StoreState.Value.StoreInfo is not null && InvoicesLoading || Invoices is not null)
{
    <section class="container">
        <h2>Recent Invoices</h2>
        <div class="box">
            @if (InvoicesLoading)
            {
                <div class="p-3 text-center">
                    <LoadingIndicator/>
                </div>
            }
            @if (Invoices is not null)
            {
                @if (Invoices.Any())
                {
                    <div class="list-group list-group-flush invoices">
                        @foreach (var i in Invoices)
                        {
                            <InvoiceItem Invoice="@i"/>
                        }
                    </div>
                }
                else if (!string.IsNullOrEmpty(InvoicesError))
                {
                    <Alert Type="danger">@InvoicesError</Alert>
                }
                else
                {
                    <p class="text-muted my-0">There are no invoices, yet.</p>
                }
            }
        </div>
    </section>
}

@code {
    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private Money? _balance;

    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }

        OnChainWalletManager.StateChanged += RefreshBalance;
        if (OnChainWalletManager.State == OnChainWalletState.Loaded) await GetBalance();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // ensure the ElementReference is set
        if (firstRender) StateHasChanged();
    }

    private async Task RefreshBalance(object? sender, (OnChainWalletState Old, OnChainWalletState New) e)
    {
        if (e is { New: OnChainWalletState.Loaded }) await GetBalance();
    }

    private async Task GetBalance()
    {
        try
        {
            var resp = await OnChainWalletManager.GetUTXOS();
            _balance = new Money(resp.Sum(r => r.TxOut.Value.ToDecimal(MoneyUnit.BTC)), MoneyUnit.BTC);
        }
        catch (Exception ex)
        {
            _balance = null;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private IEnumerable<InvoiceData>? Invoices => StoreState.Value.Invoices?.Data?.Take(5);
    private bool InvoicesLoading => StoreState.Value.Invoices?.Loading is true;
    private string? InvoicesError => StoreState.Value.Invoices?.Error;

    private string? StoreId => AccountManager.GetCurrentStore()?.Id;
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private decimal? CurrencyValue => _balance != null && Rate.HasValue && !string.IsNullOrEmpty(Currency)
        ? _balance.ToDecimal(MoneyUnit.BTC) * Rate.Value
        : null;
}
