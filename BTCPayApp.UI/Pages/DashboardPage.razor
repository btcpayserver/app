@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@using BTCPayServer.Services
@using NBitcoin
@inject IState<StoreState> StoreState
@inject IAccountManager AccountManager
@inject DisplayFormatter DisplayFormatter
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>

<header class="container d-flex align-items-center justify-content-between py-2">
    <div class="d-flex align-items-center justify-content-between gap-2">
        <AccountSwitch />
    </div>
    <div class="notifications">
        @if (!string.IsNullOrEmpty(StoreId))
        {
            <NotificationsBell/>
        }
    </div>
</header>
@if (!string.IsNullOrEmpty(_successMessage))
{
    <section class="container py-3">
        <Alert Type="success" Margin="0" Dismissible>@_successMessage</Alert>
    </section>
}
<AuthorizeView Policy="@Policies.CanViewStoreSettings" Resource="StoreId">
    <section class="container d-flex flex-column gap-4 wallet">
        @if (TotalBalance == null)
        {
            <div class="p-3 text-center">
                <LoadingIndicator/>
            </div>
        }
        else
        {
            <div class="amount text-center">
                <div class="sats fw-bold fs-1">@DisplayFormatter.Currency(TotalBalance.Value, "SATS", DisplayFormatter.CurrencyFormat.Symbol)</div>
                @if (CurrencyValue.HasValue)
                {
                    <div class="fiat fw-semibold text-muted">@DisplayFormatter.Currency(CurrencyValue.Value, Currency, DisplayFormatter.CurrencyFormat.Symbol)</div>
                }
            </div>
        }
    </section>
</AuthorizeView>

@if (InvoicesLoading || Invoices is not null)
{
    <section class="container">
        <h2>Recent Invoices</h2>
        <InvoiceList Invoices="Invoices" Loading="InvoicesLoading" Error="InvoicesError"/>
    </section>
}

@code {
    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // ensure the ElementReference is set
        if (firstRender) StateHasChanged();
    }
    private IEnumerable<InvoiceData>? Invoices => StoreState.Value.Invoices?.Data?.Take(5);
    private bool InvoicesLoading => StoreState.Value.Invoices?.Loading is true;
    private string? InvoicesError => StoreState.Value.Invoices?.Error;

    private string? StoreId => AccountManager.GetCurrentStore()?.Id;
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private decimal? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).ToDecimal(MoneyUnit.Satoshi);
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private decimal? LightningOnchainBalance => LightningBalance?.OnchainBalance.Confirmed.ToDecimal(MoneyUnit.Satoshi);
    private decimal? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(LightMoneyUnit.Satoshi);
    private decimal? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private decimal? CurrencyValue => TotalBalance != null && Rate.HasValue && !string.IsNullOrEmpty(Currency)
        ? new Money(TotalBalance.Value, MoneyUnit.Satoshi).ToDecimal(MoneyUnit.BTC) * Rate.Value
        : null;
}
