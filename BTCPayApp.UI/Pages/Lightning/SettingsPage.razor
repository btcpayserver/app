@attribute [Route(Routes.LightningSettings)]
@using System.Text.Json
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Data
@using Microsoft.Extensions.Logging
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.LDK
@using BTCPayApp.Core.Wallet
@using BTCPayServer.Client.Models
@inject LightningNodeManager LightningNodeManager
@inject IState<RootState> State
@inject ILogger<SettingsPage> Logger
@inject IAccountManager AccountManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Lightning Node</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>
            @if (!string.IsNullOrEmpty(Node?.Network.Name))
            {
                @Node.Network.Name
            }
            Lightning Node
        </h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (State.Value.LightningNodeState is LightningNodeState.NotConfigured)
            {
                <button class="btn btn-primary" @onclick="ConfigureLNWallet">Configure Lightning Wallet</button>
            }
            else if (Node is not null && State.Value.LightningNodeState is not LightningNodeState.Error)
            {
                <h2 class="d-flex flex-wrap align-items-center gap-2">
                    <span>@(_config?.Alias ?? "Lightning Node")</span>
                    @if (!string.IsNullOrEmpty(_storePaymentMethodIdentifier)
                         // && _storePaymentMethodIdentifier == ConnectionString
                )
                    {
                        <span class="badge bg-info">Lightning Payment Method</span>
                    }
                </h2>
                <div class="box mb-5">
                    @if (Node is not null)
                    {
                        <div class="form-floating">
                            <TruncateCenter Text="@Node.NodeId.ToString()" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                            <label>Node ID</label>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(_config?.LightningDerivationPath))
                    {
                        <div class="form-floating">
                            <TruncateCenter Text="@_config.LightningDerivationPath" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                            <label>Derivation Path</label>
                        </div>
                    }

                    @* @if (!string.IsNullOrEmpty(ConnectionString)) *@
                    @* { *@
                    @*     <div class="form-floating"> *@
                    @*         <TruncateCenter Text="@ConnectionString" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/> *@
                    @*         <label>Connection String</label> *@
                    @*     </div> *@
                    @* *@
                    @*     @if (!string.IsNullOrEmpty(StoreId) && _storePaymentMethodIdentifier != ConnectionString) *@
                    @*     { *@
                    @*         <button class="btn btn-primary my-3" @onclick="SetStorePaymentMethod">Set as lightning payment method for store</button> *@
                    @*     } *@
                    @* } *@
                </div>
            }
            else
            {
                <LightningNodeStateAlert State="State.Value.LightningNodeState" />
            }
            @if (State.Value.LightningNodeState is LightningNodeState.Init or LightningNodeState.Loaded or LightningNodeState.Stopped or LightningNodeState.Error)
            {
                <h2>Lightning Control</h2>
                <div class="box mb-2 d-grid d-sm-flex flex-wrap gap-3 buttons">
                    @if (State.Value.LightningNodeState is LightningNodeState.Init or LightningNodeState.Stopped or LightningNodeState.Error)
                    {
                        <button class="btn btn-secondary" type="button" @onclick="LightningNodeManager.StartNode">START</button>
                    }
                    else if (State.Value.LightningNodeState is LightningNodeState.Loaded)
                    {
                        <button class="btn btn-outline-warning" type="button" @onclick="LightningNodeManager.StopNode">STOP</button>
                        <button class="btn btn-outline-danger" type="button" @onclick="LightningNodeManager.CleanseTask">DESTROY</button>
                    }
                </div>
            }
            @if (State.Value.LightningNodeState is LightningNodeState.Loaded)
            {
                <div class="box">
                    <ul class="list-group list-group-flush list-group-links">
                        <li class="list-group-item">
                            <a href="@Routes.ChannelsPeers">
                                <Icon Symbol="lightning-node"/>
                                <span>Channels and Peers</span>
                                <Icon Symbol="caret-right"/>
                            </a>
                        </li>
                    </ul>
                </div>
            }
            @if (Node is not null)
            {
                <h2>Lightning Settings</h2>
                <ValidationEditContext @ref="_validationEditContext"  Model="Model" OnValidSubmit="UpdateConfig" SuccessMessage="@SuccessMessage" ErrorMessage="@ErrorMessage">
                    <DataAnnotationsValidator/>
                    <fieldset class="box">
                        @if (_jitOptions?.Any() is true)
                        {
                            <div class="form-group">
                                <label for="JITLSP" class="form-label">Lightning Service Provider</label>
                                <InputSelect id="JITLSP" @bind-Value="Model.JitLsp" class="form-select">
                                    <option value="">None</option>
                                    @foreach (var jit in _jitOptions)
                                    {
                                        <option value="@jit">@jit</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => Model.JitLsp)"/>
                            </div>
                        }
                        <div class="form-group">
                            <label for="RgsUrl" class="form-label">Rapid Gossip Sync Server URL</label>
                            <InputText @bind-Value="Model.RgsUrl" type="url" class="form-control" id="RgsUrl"/>
                        </div>
                        <div id="CtaContainer" class="container d-flex align-items-center justify-content-between">
                            <button type="submit" class="btn btn-primary w-100" disabled="@_validationEditContext!.Invalid">
                                <span>Update Configuration</span>
                            </button>
                        </div>
                    </fieldset>
                </ValidationEditContext>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private LightningConfig? _config;
    private LDKNode? Node => LightningNodeManager.Node;
    private string? StoreId => AccountManager.CurrentStore?.Id;
    private static string PaymentMethodId => LightningNodeManager.PaymentMethodId;
    private string? _storePaymentMethodIdentifier;
    // We need a ui/component for the api keys now.
    // private string? ConnectionString => LightningNodeManager.ConnectionString;
    private string[]? _jitOptions;
    private SettingsModel Model { get; set; } = new();
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }
    private ValidationEditContext? _validationEditContext;

    private class SettingsModel
    {
        public string? JitLsp { get; set; }
        public string? RgsUrl { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Node is not null)
        {
            Node.ConfigUpdated += RefreshConfig;
            _jitOptions = await Node.GetJITLSPs();
            await RefreshConfig(this, await Node.GetConfig());
        }

        if (!string.IsNullOrEmpty(StoreId))
            await GetStorePaymentMethod();
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        if (Node is not null)
            Node.ConfigUpdated -= RefreshConfig;

        return ValueTask.CompletedTask;
    }

    private async Task UpdateConfig()
    {
        if (Node is null) return;
        SuccessMessage = ErrorMessage = null;
        try
        {
            await Node.UpdateConfig(config =>
            {
                config.JITLSP = Model.JitLsp;
                config.RapidGossipSyncUrl = string.IsNullOrEmpty(Model.RgsUrl) ? null : Uri.TryCreate(Model.RgsUrl, UriKind.Absolute, out var uri) ? uri: null;
                return Task.FromResult((config, true));
            });
            SuccessMessage = "Lightning configuration updated.";
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task RefreshConfig(object? sender, LightningConfig config)
    {
        if (Node is null) return;
        _config = config;
        Model.JitLsp = _config?.JITLSP;
        Model.RgsUrl = _config?.RapidGossipSyncUrl?.ToString();
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetStorePaymentMethod()
    {
        if (string.IsNullOrEmpty(StoreId)) return;
        try
        {
            var pm = await AccountManager.GetClient().GetStorePaymentMethod(StoreId, PaymentMethodId, true);
            _storePaymentMethodIdentifier = GetConnectionString(pm);
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Payment method {PaymentMethodId} unset for store {StoreId}", PaymentMethodId, StoreId);
        }
    }
    //
    // private async Task SetStorePaymentMethod()
    // {
    //     if (string.IsNullOrEmpty(StoreId) || string.IsNullOrEmpty(ConnectionString)) return;
    //     _successMessage = _errorMessage = null;
    //     try
    //     {
    //         var pm = await AccountManager.GetClient().UpdateStorePaymentMethod(StoreId, PaymentMethodId, new UpdatePaymentMethodRequest
    //         {
    //             Enabled = true,
    //             Config = ConnectionString
    //         });
    //         _storePaymentMethodIdentifier = GetConnectionString(pm);
    //         _successMessage = "Store payment method set.";
    //     }
    //     catch (Exception ex)
    //     {
    //         _errorMessage = $"Error setting store payment method: {ex.Message}";
    //         Logger.LogError(ex, "Error setting payment method {PaymentMethodId} for store {StoreId}", PaymentMethodId, StoreId);
    //     }
    //
    //     await InvokeAsync(StateHasChanged);
    // }

    private async Task ConfigureLNWallet()
    {
        try
        {
            await LightningNodeManager.Generate();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error configuring LN wallet";
            Logger.LogError(ex, "Error configuring LN wallet");
        }
    }

    private string? GetConnectionString(GenericPaymentMethodData? pm)
    {
        if (string.IsNullOrEmpty(pm?.Config.ToString())) return null;
        using var jsonDoc = JsonDocument.Parse(pm.Config.ToString());
        return jsonDoc.RootElement.TryGetProperty("connectionString", out var connectionStringElement) &&
               connectionStringElement.GetString() is { } connectionString
            ? connectionString
            : null;
    }
}
