@attribute [Route(Routes.ChannelsPeers)]
@using System.Text.RegularExpressions
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Data
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Helpers
@using BTCPayApp.Core.LDK
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Models
@using BTCPayApp.UI.Util
@using BTCPayServer.Lightning
@using LNURL
@using NBitcoin
@using org.ldk.enums
@using org.ldk.structs
@using NodeInfo = BTCPayServer.Lightning.NodeInfo
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject NavigationManager NavigationManager
@inject LightningNodeManager LightningNodeManager
@inject IState<RootState> State
@inject IState<StoreState> StoreState
@inject IState<UIState> UIState
@inject IDispatcher Dispatcher
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Peers and Channels</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Peers and Channels</h1>
        <SectionContent SectionId="Titlebar.End">
            @if (Loading)
            {
                <LoadingIndicator/>
            }
        </SectionContent>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (LightningNodeManager.IsActive)
            {
                <h2>Peers</h2>
                <PeersList Peers="_peers" OnConnectPeer="ConnectPeer" OnDisconnectPeer="DisconnectPeer" OnUpdatePeer="UpdatePeer" UpdatingPeerId="@_updatingPeer" class="mb-4"/>

                <h2>Connect Peer</h2>
                <ValidationEditContext @ref="_connectEditContext" Model="PeerModel" OnValidSubmit="ConnectToNewPeer" SuccessMessage="@_connectSuccessMessage" ErrorMessage="@_connectErrorMessage">
                    <DataAnnotationsValidator/>
                    <fieldset class="box">
                        <div class="form-group">
                            <label for="PeerUrl" class="form-label" data-required>Peer URL</label>
                            <InputText @bind-Value="PeerModel.PeerUrl" id="PeerUrl" class="form-control"/>
                            <ValidationMessage For="@(() => PeerModel.PeerUrl)"/>
                        </div>
                        <button type="submit" class="btn btn-primary w-100" disabled="@(_connectEditContext!.Invalid || _connectingNewPeer)">
                            @if (_connectingNewPeer)
                            {
                                <LoadingIndicator/>
                            }
                            else
                            {
                                <span>Connect Peer</span>
                            }
                        </button>
                    </fieldset>
                </ValidationEditContext>

                <h2>Channels</h2>
                <ChannelsList Channels="_channels" OnCloseChannel="CloseChannel" UpdatingChannelId="@_updatingChannel" class="mb-4"/>

                @if (_peers?.Any() is true)
                {
                    <h2>Open Channel</h2>
                    <ValidationEditContext @ref="_openChannelEditContext" Model="ChannelModel" OnValidSubmit="HandleOpenChannel" SuccessMessage="@_channelSuccessMessage" ErrorMessage="@_channelErrorMessage">
                        <DataAnnotationsValidator/>
                        <fieldset class="box">
                            @if (!ChannelModel.UseLNURL)
                            {
                                <div class="form-group">
                                    <div class="d-flex justify-content-between">
                                        <label for="PeerId" class="form-label" data-required>Peer</label>
                                        <button type="button" class="btn btn-link p-0" @onclick="() => { ChannelModel.UseLNURL = true; }">Use LNURL</button>
                                    </div>
                                    <InputSelect @bind-Value="ChannelModel.PeerId" id="PeerId" class="form-select">
                                        <option>Select peer</option>
                                        @foreach (var peer in _peers)
                                        {
                                            <option value="@peer.NodeId">
                                                @if (!string.IsNullOrEmpty(peer.Info?.Label))
                                                {
                                                    @($"{peer.Info.Label} - ")
                                                }
                                                @peer.NodeId
                                            </option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => ChannelModel.PeerId)"/>
                                </div>
                                <div class="form-group">
                                    <label for="Amount" class="form-label" data-required>Amount</label>
                                    <InputAmount Id="Amount" @bind-Value="ChannelModel.Amount" Unit="@UnitMoney" Rate="@Rate" Currency="@Currency" OnToggleDisplayCurrency="ToggleDisplayCurrency"/>
                                    <ValidationMessage For="@(() => ChannelModel.Amount)"/>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    <div class="d-flex justify-content-between">
                                        <label for="PeerId" class="form-label" data-required>LNURL Channel Request</label>
                                        <button type="button" class="btn btn-link p-0" @onclick="() => { ChannelModel.UseLNURL = false; }">Select peer</button>
                                    </div>
                                    <InputText @bind-Value="ChannelModel.LNURL" id="LNURL" class="form-control"/>
                                    <ValidationMessage For="@(() => ChannelModel.LNURL)"/>
                                </div>
                            }
                            <button type="submit" class="btn btn-primary w-100" disabled="@(_openChannelEditContext!.Invalid || _openingChannel)">
                                @if (_openingChannel)
                                {
                                    <LoadingIndicator/>
                                }
                                else
                                {
                                    <span>Open Channel</span>
                                }
                            </button>
                        </fieldset>
                    </ValidationEditContext>
                }
            }
            else
            {
                <LightningNodeStateAlert NodeState="State.Value.LightningNodeState" ConnectionState="State.Value.ConnectionState"/>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private LightningConfig? _config;
    private IEnumerable<LightningPeerModel>? _peers;
    private IEnumerable<LightningChannelModel>? _channels;
    private LDKNode? Node => LightningNodeManager.Node;
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private string DisplayCurrency => UIState.Value.DisplayCurrency;
    private MoneyUnit UnitMoney => DisplayCurrency == CurrencyDisplay.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;

    private string? _updatingPeer;
    private string? _updatingChannel;
    private bool _loading;
    private bool Loading => _loading || LightningNodeManager.State == LightningNodeState.Loading;

    private bool _openingChannel;
    private string? _channelSuccessMessage;
    private string? _channelErrorMessage;
    private ValidationEditContext? _openChannelEditContext;
    private OpenChannelModel ChannelModel { get; set; } = new();

    private bool _connectingNewPeer;
    private string? _connectSuccessMessage;
    private string? _connectErrorMessage;
    private ValidationEditContext? _connectEditContext;
    private readonly CancellationTokenSource _refreshCts = new ();
    private ConnectPeerModel PeerModel { get; set; } = new();

    private class OpenChannelModel
    {
        public bool UseLNURL { get; set; }
        [RequiredIf(nameof(UseLNURL), false)]
        public string? PeerId { get; set; }
        [RequiredIf(nameof(UseLNURL), false)]
        public decimal? Amount { get; set; }
        [RequiredIf(nameof(UseLNURL), true)]
        public string? LNURL { get; set; }
    }

    private class ConnectPeerModel
    {
        [Required]
        public string? PeerUrl { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (await LightningNodeManager.CanConfigureLightningNode())
            NavigationManager.NavigateTo(Routes.LightningSettings);
        else
            _ = RefreshData(_refreshCts.Token);
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        _refreshCts.Cancel();

        return ValueTask.CompletedTask;
    }

    private async Task RefreshData(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            await FetchData();
            await Task.Delay(TimeSpan.FromSeconds(15), token);
        }
    }

    private async Task FetchData()
    {
        if (Node == null) return;
        _loading = true;

        _config = await Node.GetConfig();
        _peers = await GetPeers(_config.Peers);
        _channels = await GetChannels(_peers);

        _loading = false;
    }

    private async Task<IEnumerable<LightningChannelModel>?> GetChannels(IEnumerable<LightningPeerModel> peers)
    {
        if (Node == null) return [];
        var chans = await Node.GetChannels() ?? [];
        return chans.Select(channel =>
        {
            var details = channel.channelDetails;
            var counterpartyId = details?.get_counterparty().get_node_id();
            var counterpartyNodeId = counterpartyId is not null ? Convert.ToHexString(counterpartyId).ToLowerInvariant() : null;
            var channelId = details?.get_channel_id().get_a();
            var outbound = details?.get_outbound_capacity_msat();
            var inbound = details?.get_inbound_capacity_msat();
            var peer = peers.FirstOrDefault(p => string.Equals(p.NodeId, counterpartyNodeId, StringComparison.InvariantCultureIgnoreCase));
            var chan = new LightningChannelModel
            {
                Id = channel.channel.Id,
                CounterpartyNodeId = counterpartyNodeId,
                CounterpartyLabel = peer?.Info?.Label,
                ChannelId = channelId,
                Connected = counterpartyId is not null && peer is not null,
                Confirmations = details?.get_confirmations() is Option_u32Z.Option_u32Z_Some x1 ? x1.some : null,
                ConfirmationsRequired = details?.get_confirmations_required() is Option_u32Z.Option_u32Z_Some x2 ? x2.some : null,
                FundingTxHash = details != null ? Convert.ToHexString(details.get_funding_txo().get_txid()).ToLowerInvariant() : null,
                Usable = details?.get_is_usable(),
                Ready = details?.get_is_channel_ready(),
                Announced = details?.get_is_announced(),
                CapacityOutbound = outbound is not null ? new LightMoney(outbound) : null,
                CapacityInbound = inbound is not null ? new LightMoney(inbound) : null,
            };

            var alternates = channel.channel.Aliases.Select(alias => alias.Id).ToHashSet();
            if (details is not null)
            {
                if (details.get_short_channel_id() is Option_u64Z.Option_u64Z_Some some)
                    alternates.Add(some.some.ToString());
                if (channelId is not null)
                    alternates.Add(Convert.ToHexString(channelId).ToLowerInvariant());
            }

            alternates.Remove(channel.channel.Id);
            chan.AlternateIds = alternates.ToArray();

            if (channel.channel.Archived)
            {
                chan.State = "Archived";
            }
            else if (details is null)
            {
                if (channel.channel.AdditionalData.TryGetValue("CloseReasonHuman", out var reasonHuman))
                {
                    var state = reasonHuman.GetString()?.Replace("ClosureReason_", "") ?? "Closed";
                    chan.State = Regex.Replace(state, "([A-Z])", " $1", RegexOptions.Compiled).Trim();
                }
                else
                {
                    chan.State =  "Unknown, probably closed";
                }
            }
            else if (details.get_channel_shutdown_state() is Option_ChannelShutdownStateZ.Option_ChannelShutdownStateZ_Some some && some.some != ChannelShutdownState.LDKChannelShutdownState_NotShuttingDown)
            {
                chan.State = some.some.ToString();
            }
            else
            {
                chan.Active = true;
                chan.State = "Active";
            }

            return chan;
        });
    }

    private async Task<IEnumerable<LightningPeerModel>> GetPeers(Dictionary<string, PeerInfo> peerInfos)
    {
        if (Node == null) return [];
        var peers = await Node.GetPeers();
        var connected = peers
            .Select(peer =>
            {
                var nodeId = Convert.ToHexString(peer.get_counterparty_node_id());
                var remembered = peerInfos.TryGetValue(nodeId.ToLowerInvariant(), out var peerConfig);
                var socket = peer.get_socket_address() is Option_SocketAddressZ.Option_SocketAddressZ_Some some1 ? some1.some.to_str() : null;
                EndPointParser.TryParse(socket, 9735, out var endpoint);
                return new LightningPeerModel
                {
                    NodeId = nodeId,
                    Socket = socket,
                    Connected = true,
                    Remembered = remembered,
                    Info = peerConfig ?? new PeerInfo { Endpoint = endpoint }
                };
            });

        var unconnected = peerInfos.Keys
            .Where(nodeId => connected.All(p => !string.Equals(p.NodeId, nodeId, StringComparison.InvariantCultureIgnoreCase)))
            .Select(nodeId =>
            {
                var remembered = peerInfos.TryGetValue(nodeId, out var peerConfig);
                return new LightningPeerModel
                {
                    NodeId = nodeId,
                    Socket = peerConfig?.Endpoint?.ToEndpointString(),
                    Connected = false,
                    Remembered = remembered,
                    Info = peerConfig ?? new PeerInfo { Endpoint = peerConfig?.Endpoint }
                };
            });

        return connected.Concat(unconnected).OrderBy(p => p.NodeId);
    }

    private async Task ConnectToNewPeer()
    {
        if (Node == null) return;
        _connectSuccessMessage = _connectErrorMessage = _channelSuccessMessage = _channelErrorMessage = null;

        try
        {
            if (!NodeInfo.TryParse(PeerModel.PeerUrl, out var nodeInfo))
            {
                _connectErrorMessage = $"Invalid peer URL: {PeerModel.PeerUrl}";
                return;
            }

            _connectingNewPeer = true;
            var result = await AsyncExtensions.RunInOtherThread(async () =>
                await Node.PeerHandler.ConnectAsync(nodeInfo, CancellationToken.None));
            if (result is not null)
            {
                _connectSuccessMessage = $"Connection to {PeerModel.PeerUrl} initiated";
                PeerModel = new ConnectPeerModel();
            }
            else
            {
                _connectErrorMessage = "Error establishing connection";
            }
        }
        catch (Exception e)
        {
            _connectErrorMessage = e.Message;
        }

        _connectingNewPeer = false;
        if (string.IsNullOrEmpty(_connectErrorMessage))
            _ = RunAsyncWithDelay(FetchData);
    }

    // run with delay to allow peer manager to process events
    private async Task RunAsyncWithDelay(Func<Task> t)
    {
        var token = _refreshCts.Token;
        await Task.Delay(TimeSpan.FromSeconds(1), token);
        await t();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ConnectPeer(LightningPeerModel peer)
    {
        if (Node == null) return;
        _connectSuccessMessage = _connectErrorMessage = _channelSuccessMessage = _channelErrorMessage = null;
        _updatingPeer = peer.NodeId;

        try
        {
            if (EndPointParser.TryParse(peer.Socket, 9735, out var endpoint))
                await AsyncExtensions.RunInOtherThread(async () =>
                    await Node.PeerHandler.ConnectAsync(new PubKey(peer.NodeId), endpoint));
            else
                _connectErrorMessage = $"Could not resolve endpoint for socket {peer.Socket}";
        }
        catch (Exception e)
        {
            _connectErrorMessage = e.Message;
        }

        _updatingPeer = null;

        _ = RunAsyncWithDelay(FetchData);
    }

    private async Task DisconnectPeer(LightningPeerModel peer)
    {
        if (Node == null) return;
        _connectSuccessMessage = _connectErrorMessage = _channelSuccessMessage = _channelErrorMessage = null;
        _updatingPeer = peer.NodeId;

        try
        {
            await AsyncExtensions.RunInOtherThread(async () =>
                await Node.PeerHandler.DisconnectAsync(new PubKey(peer.NodeId)));
        }
        catch (Exception e)
        {
            _connectErrorMessage = e.Message;
        }

        _updatingPeer = null;

        _ = RunAsyncWithDelay(FetchData);
    }

    private async Task UpdatePeer(LightningPeerModel peer)
    {
        if (Node == null) return;
        _connectSuccessMessage = _connectErrorMessage = _channelSuccessMessage = _channelErrorMessage = null;
        _updatingPeer = peer.NodeId;
        await Node.Peer(new PubKey(peer.NodeId), peer.Info);
        _updatingPeer = null;
        await FetchData();
    }

    private async Task HandleOpenChannel()
    {
        if (ChannelModel.UseLNURL)
            await ParseChannelRequest();
        else
            await OpenChannel();
    }

    private async Task OpenChannel()
    {
        if (Loading || Node == null || ChannelModel.Amount is null || string.IsNullOrEmpty(ChannelModel.PeerId)) return;

        _connectSuccessMessage = _connectErrorMessage = _channelSuccessMessage = _channelErrorMessage = null;
        _openingChannel = true;
        try
        {
            var amount = new Money(ChannelModel.Amount.Value, MoneyUnit.Satoshi);
            var result = await Node.OpenChannel(amount, new PubKey(ChannelModel.PeerId));
            if (result is Result_ChannelIdAPIErrorZ.Result_ChannelIdAPIErrorZ_OK)
            {
                _channelSuccessMessage = "Channel open initiated";
                ChannelModel = new OpenChannelModel();
            }
            else if (result is Result_ChannelIdAPIErrorZ.Result_ChannelIdAPIErrorZ_Err err)
            {
                _channelErrorMessage = err.err.GetError();
            }
        }
        catch (Exception e)
        {
            _channelErrorMessage = e.Message;
        }

        _openingChannel = false;
        if (string.IsNullOrEmpty(_channelErrorMessage))
            _ = RunAsyncWithDelay(FetchData);
    }

    private async Task ParseChannelRequest()
    {
        if (Loading || Node == null || string.IsNullOrEmpty(ChannelModel.LNURL)) return;
        _connectSuccessMessage = _connectErrorMessage = _channelSuccessMessage = _channelErrorMessage = null;
        _openChannelEditContext!.MessageStore!.Clear();

        try
        {
            var uri = LNURL.Parse(ChannelModel.LNURL, out var tag);
            var http = HttpClientFactory.CreateClient();
            var channelRequest = (LNURLChannelRequest) await LNURL.FetchInformation(uri, tag, http, new CancellationTokenSource(TimeSpan.FromSeconds(5)).Token);
            if (channelRequest is null)
            {
                _openChannelEditContext!.MessageStore!.Add(() => ChannelModel.LNURL, "The channel request is invalid");
                _openChannelEditContext!.NotifyValidationStateChanged();
                return;
            }
            if (!EndPointParser.TryParse($"{channelRequest.Uri.Host}:{channelRequest.Uri.Port}", 9735, out var endpoint))
            {
                _channelErrorMessage = "The channel request provided an invalid endpoint for the peer";
                return;
            }

            _openingChannel = true;
            await Node.Peer(channelRequest.Uri.NodeId, new PeerInfo { Endpoint = endpoint, Trusted = true });
            await ConnectPeer(new LightningPeerModel { NodeId = channelRequest.Uri.NodeId.ToString(), Socket = endpoint.ToEndpointString() });
            await channelRequest.SendRequest(Node.NodeId, true, http, new CancellationTokenSource(TimeSpan.FromSeconds(10)).Token);
            _channelSuccessMessage = "Successfully initiated channel creation. Please wait for the peer to execute.";
        }
        catch (Exception e)
        {
            _openChannelEditContext!.MessageStore!.Add(() => ChannelModel.LNURL, e.Message);
            _openChannelEditContext!.NotifyValidationStateChanged();
        }

        _openingChannel = false;
        if (_channelSuccessMessage is null && _channelErrorMessage is null)
            _channelErrorMessage = "Error opening channel";
        else
            _ = RunAsyncWithDelay(FetchData);
    }

    private async Task CloseChannel(LightningChannelModel channel)
    {
        if (Node == null) return;
        _connectSuccessMessage = _connectErrorMessage = _channelSuccessMessage = _channelErrorMessage = null;

        if (channel.ChannelId is null)
        {
            _channelErrorMessage = "Could not resolve Channel ID";
            return;
        }

        if (channel.CounterpartyNodeId is null)
        {
            _channelErrorMessage = "Could not resolve Counterparty Node ID";
            return;
        }

        _updatingChannel = channel.Id;
        try
        {
            var channelId = ChannelId.from_bytes(channel.ChannelId);
            var counterparty = new PubKey(channel.CounterpartyNodeId);
            var force = !channel.Connected;
            var result = await Node.CloseChannel(channelId, counterparty, force);
            if (result is Result_NoneAPIErrorZ.Result_NoneAPIErrorZ_OK)
            {
                _channelSuccessMessage = $"{(force ? "Force-closing" : "Closing")} channel {channelId} with {counterparty}.";
                ChannelModel = new OpenChannelModel();
            }
            else if (result is Result_NoneAPIErrorZ.Result_NoneAPIErrorZ_Err err)
            {
                _channelErrorMessage = $"{(force ? "Force-closing" : "Closing")} channel {channelId} with {counterparty} failed: {err.err.GetError()}";
            }
        }
        catch (Exception e)
        {
            _channelErrorMessage = e.Message;
        }

        _updatingChannel = null;
        _ = RunAsyncWithDelay(FetchData);
    }

    private void ToggleDisplayCurrency()
    {
        if (ChannelModel?.Amount.HasValue is true)
            ChannelModel.Amount = new Money(ChannelModel.Amount.Value, UnitMoney).ToDecimal(UnitMoney == MoneyUnit.Satoshi
                ? MoneyUnit.BTC
                : MoneyUnit.Satoshi);
        Dispatcher.Dispatch(new UIState.ToggleDisplayCurrency());
    }
}
