@attribute [AllowAnonymous]
@layout SimpleLayout
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using System.Net.Mail
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using Microsoft.Extensions.Logging
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountManager AccountManager
@inject ILogger<ConnectPage> Logger
@inject NavigationManager NavigationManager
@inject IState<UIState> UIState
@inject IDispatcher Dispatcher

@code {
    [CascadingParameter]
    protected Task<AuthenticationState>? AuthState { get; set; }

    [SupplyParameterFromQuery]
    protected string? ServerUrl { get; set; }

    [SupplyParameterFromQuery]
    protected string? Success { get; set; }

    private const string InviteSeparator = "/invite/";
    private const string LoginCodeSeparator = ";";
    protected ValidationEditContext? ValidationEditContext;
    protected bool Sending;
    protected string? ErrorMessage;
    protected string? SuccessMessage;
    private string? _qrInput;

    protected string? Error => ErrorMessage ?? InstanceError;
    protected AppInstanceInfo? InstanceInfo => UIState.Value.Instance?.Data;
    protected bool InstanceLoading => UIState.Value.Instance?.Loading is true;
    private string? InstanceError => UIState.Value.Instance?.Error;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        AuthenticationStateProvider.AuthenticationStateChanged += AuthStateProviderOnAuthenticationStateChanged;
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        AuthenticationStateProvider.AuthenticationStateChanged -= AuthStateProviderOnAuthenticationStateChanged;

        return ValueTask.CompletedTask;
    }

    protected async void OnQrCodeScan(string code)
    {
        // prevent duplicate submission due to quirk in QR reader lib
        if (code == _qrInput) return;
        _qrInput = code;

        Logger.LogInformation("Scanned QR code: {QrCode}", code);
        await JS.InvokeVoidAsync("Interop.closeModal", "#ScanQrCodeModal");

        await HandleInput(code);
    }

    protected void ResolveInstanceInfo(string? uri)
    {
        if (string.IsNullOrEmpty(uri))
        {
            Dispatcher.Dispatch(new UIState.SetInstanceInfo(null, null));
            return;
        }
        var url = uri.Contains(InviteSeparator) ? uri.Split(InviteSeparator).First() : uri;
        if (url != InstanceInfo?.BaseUrl) Dispatcher.Dispatch(new UIState.FetchInstanceInfo(uri));
    }

    protected async Task<bool> HandleInput(string urlOrLoginCode)
    {
        if (urlOrLoginCode.Contains(InviteSeparator))
        {
            return await HandleInviteUrl(urlOrLoginCode);
        }
        if (urlOrLoginCode.Contains(LoginCodeSeparator))
        {
            return await HandleLoginCode(urlOrLoginCode);
        }
        return false;
    }

    private async Task<bool> HandleInviteUrl(string url)
    {
        ErrorMessage = null;
        Sending = true;

        var result = await AccountManager.AcceptInvite(url);
        var message = result.Messages?.Any() is true ? string.Join(",", result.Messages) : null;
        Sending = false;
        if (result.Succeeded)
        {
            var response = result.Response;
            var serverUrl = url.Split(InviteSeparator).First();
            var param = new Dictionary<string, object?> { { "serverUrl", serverUrl }, { "success", message } };
            if (string.IsNullOrEmpty(response?.PasswordSetCode))
            {
                var login = NavigationManager.GetUriWithQueryParameters(Routes.Login, param);
                NavigationManager.NavigateTo(login);
            }
            else
            {
                param["Email"] = response.Email;
                param["ResetCode"] = response.PasswordSetCode;
                param["Mode"] = ForgotPasswordPage.PasswordMode.Set.ToString();
                var forgotPassword = NavigationManager.GetUriWithQueryParameters(Routes.ForgotPassword, param);
                NavigationManager.NavigateTo(forgotPassword);
            }
            return true;
        }
        ErrorMessage = message ?? "Accepting invitation failed.";
        return false;
    }

    private async Task<bool> HandleLoginCode(string code)
    {
        var parts = code.Split(LoginCodeSeparator);
        if (parts.Length == 3 && Uri.TryCreate(parts[1], UriKind.Absolute, out _) && MailAddress.TryCreate(parts[2], out _))
        {
            ErrorMessage = null;
            Sending = true;
            StateHasChanged();
            var result = await AccountManager.LoginWithCode(parts[1], parts[2], parts.First());
            Sending = false;
            if (result.Succeeded) return true;

            ErrorMessage = result.Messages?.Contains("Failed") is false
                ? string.Join(",", result.Messages)
                : "Invalid login attempt.";
        }
        else
        {
            ErrorMessage = "Invalid login code";
        }
        StateHasChanged();
        return false;
    }

    private async void AuthStateProviderOnAuthenticationStateChanged(Task<AuthenticationState> authTask)
    {
        await RedirectForAuthState(authTask);
    }

    protected async Task RedirectForAuthState(Task<AuthenticationState> authTask)
    {
        var authState = await authTask;
        string route;
        if (authState.User.Identity?.IsAuthenticated is true)
        {
            var storeId = AccountManager.GetCurrentStore()?.Id;
            if (storeId == null)
            {
                route = AccountManager.GetUserInfo()?.Stores?.Any() is true
                    ? Routes.SelectStore
                    : Routes.CreateStore;
            }
            else
            {
                route = Routes.Dashboard;
            }
        }
        else
        {
            var accounts = await AccountManager.GetAccounts();
            route = accounts.Any() ? Routes.Login : Routes.Welcome;
        }
        var uri = string.IsNullOrEmpty(Success) ? route : NavigationManager.GetUriWithQueryParameters(route,
            new Dictionary<string, object?> { {"success", Success } } );
        NavigationManager.NavigateTo(uri);
    }
}
