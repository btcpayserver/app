@attribute [AllowAnonymous]
@layout SimpleLayout
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using System.Net.Mail
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Models
@using BTCPayApp.UI.Features
@using Microsoft.Extensions.Logging
@using System.Web
@inject IJSRuntime JS
@inject IAccountManager AccountManager
@inject BTCPayConnectionManager ConnectionManager
@inject ILogger<ConnectPage> Logger
@inject NavigationManager NavigationManager
@inject IState<UIState> UIState
@inject IDispatcher Dispatcher

@code {
    [CascadingParameter]
    protected Task<AuthenticationState>? AuthState { get; set; }

    [SupplyParameterFromQuery]
    protected string? ServerUrl { get; set; }

    [SupplyParameterFromQuery]
    protected string? Success { get; set; }

    protected ValidationEditContext? ValidationEditContext;
    protected bool Sending;
    protected string? ErrorMessage;
    protected string? SuccessMessage;
    private string? _qrInput;

    protected string? Error => ErrorMessage ?? InstanceError;
    protected AppInstanceInfo? InstanceInfo => UIState.Value.Instance?.Data;
    protected bool InstanceLoading => UIState.Value.Instance?.Loading is true;
    private string? InstanceError => UIState.Value.Instance?.Error;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ConnectionManager.ConnectionChanged += ConnectionStateChanged;
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        ConnectionManager.ConnectionChanged -= ConnectionStateChanged;

        return ValueTask.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Success))
        {
            SuccessMessage = Uri.UnescapeDataString(Success);
        }
    }

    // ReSharper disable once AsyncVoidMethod
    protected async void OnQrCodeScan(string code)
    {
        await JS.InvokeVoidAsync("Interop.closeModal", "#ScanQrCodeModal");
        // prevent duplicate submission due to quirk in QR reader lib
        if (code == _qrInput) return;
        _qrInput = code;

        await HandleInput(code);
        await InvokeAsync(StateHasChanged);

        // reset temporary input
        _qrInput = null;
    }

    protected void ResolveInstanceInfo(string? uri)
    {
        if (string.IsNullOrEmpty(uri))
        {
            Dispatcher.Dispatch(new UIState.SetInstanceInfo(null, null));
            return;
        }
        var url = GetBaseUri(uri);
        if (url != InstanceInfo?.BaseUrl) Dispatcher.Dispatch(new UIState.FetchInstanceInfo(url));
    }

    protected async Task<bool?> HandleInput(string urlOrLoginCode)
    {
        if (urlOrLoginCode.Contains(Constants.LoginCodeSeparator))
        {
            return await HandleLoginCode(urlOrLoginCode);
        }
        if (urlOrLoginCode.Contains(Constants.POSQRLoginSeparator))
        {
            return await HandlePOSQRLoginCode(urlOrLoginCode);
        }
        if (urlOrLoginCode.Contains(Constants.EncryptionKeySeparator))
        {
            return await HandleEncryptionKey(urlOrLoginCode);
        }
        if (urlOrLoginCode.Contains(Constants.InviteSeparator))
        {
            return await HandleInviteUrl(urlOrLoginCode);
        }
        return null;
    }

    private async Task<bool> HandleInviteUrl(string url)
    {
        ErrorMessage = null;
        Sending = true;

        var result = await AccountManager.AcceptInvite(url);
        var message = result.Messages?.Any() is true ? string.Join(",", result.Messages) : null;
        Sending = false;
        if (result.Succeeded)
        {
            var response = result.Response;
            var serverUrl = GetBaseUri(url);
            var param = new Dictionary<string, object?> { { "serverUrl", serverUrl }, { "success", message } };
            if (string.IsNullOrEmpty(response?.PasswordSetCode))
            {
                var login = NavigationManager.GetUriWithQueryParameters(Routes.Login, param);
                NavigationManager.NavigateTo(login);
            }
            else
            {
                param["Email"] = response.Email;
                param["ResetCode"] = response.PasswordSetCode;
                param["Mode"] = nameof(ForgotPasswordPage.PasswordMode.Set);
                var forgotPassword = NavigationManager.GetUriWithQueryParameters(Routes.ForgotPassword, param);
                NavigationManager.NavigateTo(forgotPassword);
            }
            return true;
        }
        ErrorMessage = message ?? "Accepting invitation failed.";
        return false;
    }

    private async Task<bool> HandleLoginCode(string code)
    {
        var parts = code.Split(Constants.LoginCodeSeparator);
        if (parts.Length == 3 && Uri.TryCreate(parts[1], UriKind.Absolute, out _) && MailAddress.TryCreate(parts[2], out _))
        {
            ErrorMessage = null;
            Sending = true;
            StateHasChanged();
            var result = await AccountManager.LoginWithCode(parts[1], parts[2], parts.First());
            Sending = false;
            if (result.Succeeded) return true;

            ErrorMessage = result.Messages?.Contains("Failed") is false
                ? string.Join(",", result.Messages)
                : "Invalid login attempt.";
        }
        else
        {
            ErrorMessage = "Invalid login code";
        }
        StateHasChanged();
        return false;
    }

    private async Task<bool> HandlePOSQRLoginCode(string url)  
    {  
        var uri = new Uri(url);
        var baseUrl = uri.GetLeftPart(UriPartial.Authority);
        var queryParams = HttpUtility.ParseQueryString(new Uri(url).Query);  

        if (queryParams is not null)
        {  
            var loginCode = queryParams[Constants.POSQRLoginSeparator];
            if(string.IsNullOrEmpty(loginCode))  
            {  
                ErrorMessage = "Invalid employee login code";  
                StateHasChanged();  
                return false;  
            }

            ErrorMessage = null;  
            Sending = true;  
            StateHasChanged();  
            var result = await AccountManager.LoginWithCode(baseUrl, null, loginCode);  
            Sending = false; 

            if (result.Succeeded) return true;  

            ErrorMessage = result.Messages?.Contains("Failed") is false  
                ? string.Join(",", result.Messages)  
                : "Invalid login attempt.";  
        }  
        else  
        {  
            ErrorMessage = "Invalid login code";  
        }  
        StateHasChanged();  
        return false;  
    }

    private async Task<bool> HandleEncryptionKey(string code)
    {
        var parts = code.Split(Constants.EncryptionKeySeparator);
        if (parts.Length == 3 && Uri.TryCreate(parts[1], UriKind.Absolute, out _) && MailAddress.TryCreate(parts[2], out _))
        {
            ErrorMessage = null;
            Sending = false;
            StateHasChanged();
            var result = await AccountManager.AddAccountWithEncyptionKey(parts[1], parts[2], parts.First());
            if (result.Succeeded)
            {
                var param = new Dictionary<string, object?> { { "useExistingAccount", true } };
                var login = NavigationManager.GetUriWithQueryParameters(Routes.Login, param);
                NavigationManager.NavigateTo(login, RelativePath.StartsWith(Routes.Login));
                return true;
            }

            ErrorMessage = result.Messages?.Contains("Failed") is false
                ? string.Join(",", result.Messages)
                : "Invalid login attempt.";
        }
        else
        {
            ErrorMessage = "Invalid pairing code";
        }
        StateHasChanged();
        return false;
    }

    private async Task ConnectionStateChanged(object? sender, (BTCPayConnectionState Old, BTCPayConnectionState New) e)
    {
        await RedirectForAuthState();
    }

    protected async Task RedirectForAuthState()
    {
        if (AuthState == null) return;
        var authState = await AuthState;
        var route = AccountManager.Account != null ? Routes.Connect : Routes.Welcome;
        if (authState.User.Identity?.IsAuthenticated is true)
        {
            var storeId = AccountManager.CurrentStore?.Id;
            var current = NavigationManager.Uri[(NavigationManager.BaseUri.Length - 1)..];
            switch (ConnectionManager.ConnectionState)
            {
                case BTCPayConnectionState.Connecting or BTCPayConnectionState.Syncing:
                    {
                        route = Routes.Index;
                        break;
                    }
                case BTCPayConnectionState.WaitingForEncryptionKey:
                    route = Routes.Pairing;
                    break;
                default:
                    {
                        if (storeId == null)
                        {
                            route = AccountManager.UserInfo?.Stores?.Any() is true
                                ? Routes.SelectStore
                                : Routes.CreateStore;
                        }
                        else if (current == Routes.Index)
                        {
                            route = Routes.PointOfSale;
                            if(AccountManager.CurrentStore?.RoleId == "Employee")
                            {
                                await AccountManager.SwitchMode(storeId, "Cashier");
                            }
                        }
                    else
                    {
                        // do not redirect if the user is already on the correct page
                        return;
                    }
                    break;
                }
            }
        }
        var uri = string.IsNullOrEmpty(Success) ? route : NavigationManager.GetUriWithQueryParameters(route,
            new Dictionary<string, object?> { {"success", Success } } );
        NavigationManager.NavigateTo(uri);
    }

    protected string GetBaseUri(string? str)
    {
        if (string.IsNullOrEmpty(str)) return string.Empty;

        string? url = null;
        if (str.Contains(Constants.LoginCodeSeparator))
        {
            var parts = str.Split(Constants.LoginCodeSeparator);
            url = parts.Length == 3 ? parts[1] : null;
        }
        if (str.Contains(Constants.EncryptionKeySeparator))
        {
            var parts = str.Split(Constants.EncryptionKeySeparator);
            url = parts.Length == 3 ? parts[1] : null;
        }
        if (str.Contains(Constants.InviteSeparator))
        {
            url = str.Split(Constants.InviteSeparator).First();
        }
        url ??= str;

        return url.Contains("://", StringComparison.OrdinalIgnoreCase) ? url : $"https://{url}";
    }

    private string RelativePath => "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
}
