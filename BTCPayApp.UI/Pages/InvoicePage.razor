@attribute [Route(Routes.Invoice)]
@using BTCPayApp.CommonServer
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@using BTCPayServer.Client.Models
@using Newtonsoft.Json.Linq
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager
@inject IDispatcher Dispatcher
@inject IState<StoreState> StoreState
@inject DisplayFormatter DisplayFormatter

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Invoice</h1>
    </Titlebar>
</SectionContent>

<section class="container">
    @if (!string.IsNullOrEmpty(Error))
    {
        <Alert Type="danger">@Error</Alert>
    }
    @if (Invoice is not null)
    {
        <div class="invoice">
            <span>Invoice @Invoice.Id</span>
            <div class="h3"><span data-sensitive>@DisplayFormatter.Currency(Invoice.Amount, Invoice.Currency, DisplayFormatter.CurrencyFormat.Symbol)</span></div>
            <div class="status d-flex flex-wrap align-items-center gap-2">
                <InvoiceStatusDisplay Invoice="@Invoice" />
            </div>

            <h4 class="mt-4">General Information</h4>
            <div class="box">
                <table class="table my-0">
                    <tbody>
                    @if (Invoice.Metadata.TryGetValue("orderId", out var orderId))
                    {
                        <tr>
                            <th>Order Id</th>
                            <td>
                                @if (Invoice.Metadata.TryGetValue("orderUrl", out var orderUrl))
                                {
                                    <a href="@orderUrl" rel="noreferrer noopener" target="_blank">@orderId</a>
                                }
                                else
                                {
                                    <span>@orderId</span>
                                }
                            </td>
                        </tr>
                    }
                    @if (Invoice.Metadata.TryGetValue("paymentRequestId", out var paymentRequestId))
                    {
                        <tr>
                            <th>Payment Request Id</th>
                            <td>@paymentRequestId</td>
                        </tr>
                    }
                    <tr>
                        <th>Created</th>
                        <td>
                            <DateDisplay DateTimeOffset="@Invoice.CreatedTime"/>
                        </td>
                    </tr>
                    <tr>
                        <th>Expired</th>
                        <td>
                            <DateDisplay DateTimeOffset="@Invoice.ExpirationTime"/>
                        </td>
                    </tr>
                    </tbody>
                </table>
            </div>

            @{
                // Product
                Invoice.Metadata.TryGetValue("itemCode", out var itemCode);
                Invoice.Metadata.TryGetValue("itemDesc", out var itemDesc);
                Invoice.Metadata.TryGetValue("taxIncluded", out var taxIncluded);
            }
            @if (!string.IsNullOrEmpty(itemCode?.ToString()) || !string.IsNullOrEmpty(itemDesc?.ToString()) || taxIncluded is not null)
            {
                <h4 class="mt-5">Product Information</h4>
                <div class="box">
                    <table class="table my-0">
                        <tbody>
                        @if (!string.IsNullOrEmpty(itemCode?.ToString()))
                        {
                            <tr>
                                <th>Item code</th>
                                <td>@itemCode</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(itemDesc?.ToString()))
                        {
                            <tr>
                                <th>Item Description</th>
                                <td>@itemDesc</td>
                            </tr>
                        }
                        @if (taxIncluded is not null)
                        {
                            <tr>
                                <th>Tax Included</th>
                                <td>@taxIncluded</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }

            @{
                // Buyer
                Invoice.Metadata.TryGetValue("buyerName", out var buyerName);
                Invoice.Metadata.TryGetValue("buyerEmail", out var buyerEmail);
                Invoice.Metadata.TryGetValue("buyerPhone", out var buyerPhone);
                Invoice.Metadata.TryGetValue("buyerAddress1", out var buyerAddress1);
                Invoice.Metadata.TryGetValue("buyerAddress2", out var buyerAddress2);
                Invoice.Metadata.TryGetValue("buyerCity", out var buyerCity);
                Invoice.Metadata.TryGetValue("buyerState", out var buyerState);
                Invoice.Metadata.TryGetValue("buyerCountry", out var buyerCountry);
                Invoice.Metadata.TryGetValue("buyerZip", out var buyerZip);
            }
            @if (!string.IsNullOrEmpty(buyerName?.ToString()) || !string.IsNullOrEmpty(buyerEmail?.ToString()) ||
                 !string.IsNullOrEmpty(buyerPhone?.ToString()) || !string.IsNullOrEmpty(buyerAddress1?.ToString()) ||
                 !string.IsNullOrEmpty(buyerAddress2?.ToString()) || !string.IsNullOrEmpty(buyerCity?.ToString()) ||
                 !string.IsNullOrEmpty(buyerState?.ToString()) || !string.IsNullOrEmpty(buyerCountry?.ToString()) ||
                 !string.IsNullOrEmpty(buyerZip?.ToString()))
            {
                <h4 class="mt-5">Buyer Information</h4>
                <div class="box">
                    <table class="table my-0">
                        <tbody>
                        @if (!string.IsNullOrEmpty(buyerName?.ToString()))
                        {
                            <tr>
                                <th>Name</th>
                                <td>@buyerName</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerEmail?.ToString()))
                        {
                            <tr>
                                <th>Email</th>
                                <td>
                                    <a href="mailto:@buyerEmail">@buyerEmail</a>
                                </td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerPhone?.ToString()))
                        {
                            <tr>
                                <th>Phone</th>
                                <td>@buyerPhone</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerAddress1?.ToString()))
                        {
                            <tr>
                                <th>Address 1</th>
                                <td>@buyerAddress1</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerAddress2?.ToString()))
                        {
                            <tr>
                                <th>Address 2</th>
                                <td>@buyerAddress2</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerCity?.ToString()))
                        {
                            <tr>
                                <th>City</th>
                                <td>@buyerCity</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerState?.ToString()))
                        {
                            <tr>
                                <th>State</th>
                                <td>@buyerState</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerCountry?.ToString()))
                        {
                            <tr>
                                <th>Country</th>
                                <td>@buyerCountry</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(buyerZip?.ToString()))
                        {
                            <tr>
                                <th>Zip</th>
                                <td>@buyerZip</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }

            @if (Invoice.Metadata.TryGetValue("receiptData", out var receiptData))
            {
                Dictionary<string, object>? parsedReceiptData = null;
                try
                {
                    parsedReceiptData = PosDataParser.ParsePosData(JObject.Parse(receiptData.ToString()));
                }
                catch (Exception)
                {
                    // ignored
                }

                if (parsedReceiptData != null)
                {
                    <h4 class="mt-5">Receipt Information</h4>
                    <div class="box">
                        <DataDisplay Data="@parsedReceiptData"/>
                    </div>
                }
            }

        </div>

        @if (PaymentMethods is not null && PaymentMethods.Any())
        {
            var paymentsCount = 0;
            <h4 class="mt-5">Payment Information</h4>
            @if (!string.IsNullOrEmpty(PaymentMethodsError))
            {
                <Alert Type="danger">@PaymentMethodsError</Alert>
            }

            <div class="box">
                @foreach (var pm in PaymentMethods)
                {
                    @if (pm.Payments.Any())
                    {
                        paymentsCount++;
                        <h5 class="mt-3">@pm.PaymentMethodId</h5>
                        <div class="payment-methods table-responsive">
                            <table class="table table-hover my-0">
                                <thead>
                                <tr>
                                    <th class="text-nowrap w-175px">Payment method</th>
                                    <th>Destination</th>
                                    <th class="w-150px text-end">Rate</th>
                                    <th class="w-150px text-end">Paid</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var payment in pm.Payments)
                                {
                                    <tr>
                                        <td class="text-nowrap">@pm.PaymentMethodId</td>
                                        <td title="@payment.Destination">
                                            <TruncateCenter Text="@payment.Destination"/>
                                        </td>
                                        <td class="text-nowrap text-end">
                                            <span data-sensitive>@DisplayFormatter.Currency(@pm.Rate, Invoice.Currency, DisplayFormatter.CurrencyFormat.Symbol)</span>
                                        </td>
                                        <td class="text-nowrap text-end">
                                            <span data-sensitive>@DisplayFormatter.Currency(payment.Value, pm.Currency, DisplayFormatter.CurrencyFormat.Symbol)</span>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                }
                @if (paymentsCount == 0)
                {
                    <p class="text-muted my-0">There are no payments, yet.</p>
                }
            </div>
        }
        else if (PaymentMethodsLoading)
        {
            <div class="p-3 text-center">
                <LoadingIndicator/>
            </div>
        }
    }
    else if (Loading)
    {
        <div class="p-3 text-center">
            <LoadingIndicator/>
        </div>
    }
</section>

@code {
    [Parameter, EditorRequired]
    public string? InvoiceId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Store is not null && !string.IsNullOrEmpty(InvoiceId))
        {
            if (Invoice == null)
                Dispatcher.Dispatch(new StoreState.FetchInvoice(Store.Id!, InvoiceId));
            if (PaymentMethods == null)
                Dispatcher.Dispatch(new StoreState.FetchInvoicePaymentMethods(Store.Id!, InvoiceId));
        }
    }

    private AppUserStoreInfo? Store => AccountManager.GetCurrentStore();
    private InvoiceData? Invoice => !string.IsNullOrEmpty(InvoiceId) ? StoreState.Value.GetInvoice(InvoiceId!)?.Data : null;
    private bool Loading => !string.IsNullOrEmpty(InvoiceId) && StoreState.Value.GetInvoice(InvoiceId!)?.Loading is true;
    private string? Error => !string.IsNullOrEmpty(InvoiceId) ? StoreState.Value.GetInvoice(InvoiceId!)?.Error : null;
    private InvoicePaymentMethodDataModel[]? PaymentMethods => !string.IsNullOrEmpty(InvoiceId) ? StoreState.Value.GetInvoicePaymentMethods(InvoiceId!)?.Data : null;
    private bool PaymentMethodsLoading => !string.IsNullOrEmpty(InvoiceId) && StoreState.Value.GetInvoicePaymentMethods(InvoiceId!)?.Loading is true;
    private string? PaymentMethodsError => !string.IsNullOrEmpty(InvoiceId) ? StoreState.Value.GetInvoicePaymentMethods(InvoiceId!)?.Error : null;

    private string GetTitle() => $"Invoice {Invoice?.Id}".Trim();
}
