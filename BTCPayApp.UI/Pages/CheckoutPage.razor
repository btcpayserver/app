@attribute [Route(Routes.Checkout)]
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Models
@inject IJSRuntime JS
@inject IAccountManager AccountManager
@inject INfcService NfcService
@inject NavigationManager NavigationManager

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Checkout</PageTitle>

<iframe id="AppCheckout" name="checkout" allowfullscreen src="@CheckoutUrl" @onload="OnIframeLoad"></iframe>

@if (!_iframeLoaded)
{
    <section class="loading-container">
        <LoadingIndicator Size="lg" />
        <div class="fs-4">Loading</div>
    </section>
}

@if (_toast.IsVisible)
{
    <div class="toast-container @(_toast.IsError ? "toast-error" : "toast-success")">
        <div class="toast-message">@_toast.Message</div>
    </div>
}

<style>
    .toast-container {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 9999;
        padding: 12px 24px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        max-width: 90%;
        min-width: 200px;
        text-align: center;
        animation: slideUp 0.3s ease-out;
    }

    .toast-success {
        background-color: #28a745;
        color: white;
        border: 1px solid #1e7e34;
    }

    .toast-error {
        background-color: #dc3545;
        color: white;
        border: 1px solid #c82333;
    }

    .toast-message {
        font-size: 14px;
        font-weight: 500;
        line-height: 1.4;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }
</style>

@code {
    [Parameter, EditorRequired] public string? InvoiceId { get; set; }

    private bool _iframeLoaded;
    private bool _scanInProgress;
    private Toast _toast = new();

    private string BaseUri => AccountManager.Account!.BaseUri;
    private string? CheckoutUrl => string.IsNullOrEmpty(InvoiceId) ? null : $"{BaseUri}i/{InvoiceId}";

    private async Task OnIframeLoad()
    {
        _iframeLoaded = true;
        await JS.InvokeVoidAsync("Interop.setContext", "#AppCheckout", BaseUri);

        NfcService.OnNfcDataReceived += OnNfcDataReceived;
        NfcService.StartNfc();
        _toast.OnUpdated = StateHasChanged;
    }

    private async void OnNfcDataReceived(object? sender, NfcCardData record)
    {
        if (_scanInProgress)
            return;

        _scanInProgress = true;
        try
        {
            if (record == null || record.Message == null)
            {
                _toast.ShowError("No NFC data found");
                return;
            }

            var message = record.Message;
            if (string.IsNullOrEmpty(message))
            {
                _toast.ShowError("Empty NFC message");
                return;
            }

            var btcPayClient = new BTCPayAppClient(BaseUri);
            var req = new SubmitLnUrlRequest
            {
                InvoiceId = InvoiceId,
                Lnurl = message
            };

            _toast.ShowSuccess("Submitting NFC data to Server", 5000);

            var result = await btcPayClient.SubmitLNURLWithdrawForInvoice(req);
            if (result == null)
            {
                _toast.Hide();
                NfcService.EndNfc();
                NfcService.OnNfcDataReceived -= OnNfcDataReceived;
            }
        }
        catch (Exception ex)
        {
            try
            {
                var errorFromServer = ex.Message.Split("\"")[1].Trim('"');
                _toast.ShowError("ERROR: " + errorFromServer);
            }
            catch
            {
                _toast.ShowError("NFC call to server ERROR");
            }
        }
        finally
        {
            _scanInProgress = false;
        }
    }

    public void Dispose()
    {
        NfcService.OnNfcDataReceived -= OnNfcDataReceived;
    }

    public class Toast
    {
        private CancellationTokenSource? _cts;

        public bool IsVisible { get; private set; }
        public bool IsError { get; private set; }
        public string Message { get; private set; } = string.Empty;

        public Action? OnUpdated { get; set; }

        public void ShowSuccess(string message, int delayTime = 3000)
        {
            Show(message, false);
        }

        public void ShowError(string message, int delayTime = 3000)
        {
            Show(message, true);
        }

        private void Show(string message, bool isError, int delayTime = 3000)
        {
            _cts?.Cancel();
            _cts = new CancellationTokenSource();

            Message = message;
            IsError = isError;
            IsVisible = true;
            OnUpdated?.Invoke();

            var token = _cts.Token;
            _ = HideAfterDelayAsync(token);
        }

        private async Task HideAfterDelayAsync(CancellationToken token, int delayTime = 3000)
        {
            try
            {
                await Task.Delay(delayTime, token);
                if (!token.IsCancellationRequested)
                {
                    IsVisible = false;
                    OnUpdated?.Invoke();
                }
            }
            catch (TaskCanceledException) { }
        }

        public void Hide()
        {
            _cts?.Cancel();
            IsVisible = false;
            OnUpdated?.Invoke();
        }
    }
}
