@attribute [Route(Routes.Checkout)]
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Models
@using BTCPayApp.UI.Components.Layout
@inject IJSRuntime JS
@inject IAccountManager AccountManager
@inject INfcService NfcService
@inject NavigationManager NavigationManager

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Checkout</PageTitle>

@if (!_iframeLoaded && !_success)
{
    <section class="loading-container">
        <LoadingIndicator Size="lg" />
        <div class="fs-4">Loading</div>
    </section>
}
@if (_success)
{
    <section class="d-flex align-items-center flex-column section-complete">
        <div class="text-center p-2">
            <Icon Symbol="checkout-complete" class="checkout-complete" />
            <h1 class="py-4">Invoice Paid</h1>
        </div>
        <div class="mt-auto p-2">
            <button id="pay-button" class="btn btn-lg btn-primary mx-3" @onclick="(() => NavigationManager.NavigateTo(Routes.PointOfSale))">Return to Checkout</button>
        </div>
    </section>
}
else
{
    <iframe id="AppCheckout" name="checkout" allow="nfc" allowfullscreen src="@CheckoutUrl" @onload="OnIframeLoad"></iframe>
}


@code {
    [Parameter, EditorRequired]
    public string? InvoiceId { get; set; }

    private bool _iframeLoaded;
    private bool _success;

    private string BaseUri => AccountManager.Account!.BaseUri;
    private string? CheckoutUrl => string.IsNullOrEmpty(InvoiceId) ? null : $"{BaseUri}i/{InvoiceId}";

    private async Task OnIframeLoad()
    {
        _iframeLoaded = true;
        await JS.InvokeVoidAsync("Interop.setContext", "#AppCheckout", BaseUri);

        NfcService.OnNfcDataReceived += OnNfcDataReceived;
        NfcService.StartNfc();
    }

    private async void OnNfcDataReceived(object? sender, NfcLnUrlRecord nFCNdefRecord)
    {
        try
        {
            var btcPayClient = new BTCPayAppClient(BaseUri);
            var req = new SubmitLnUrlRequest()
            {
                InvoiceId = InvoiceId,
                Lnurl = nFCNdefRecord.LnUrl
            };

            var result = await btcPayClient.SubmitLNURLWithdrawForInvoice(req);

            _success = true;
            EndNFCScan();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("A tag identifying the LNURL endpoint was not received."))
            {
                _success = true;
                EndNFCScan();
            } else
            {
                throw ex;
            }
        }

        StateHasChanged();
    }

    void EndNFCScan()
    {
        Dispose();
        NfcService.EndNfc();
    }

    public void Dispose()
    {
        NfcService.OnNfcDataReceived -= OnNfcDataReceived;
    }

}
