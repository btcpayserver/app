@attribute [Route(Routes.Checkout)]
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Models
@inject IJSRuntime JS
@inject IAccountManager AccountManager
@inject INfcService NfcService
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Checkout</PageTitle>

@if (!_iframeLoaded)
{
    <section class="loading-container">
        <LoadingIndicator Size="lg" />
        <div class="fs-4">Loading</div>
    </section>
}
@if (!string.IsNullOrWhiteSpace(_resultMessage))
{
    <div class="alert alert-info mt-3">@_resultMessage</div>
} else
{
    <iframe id="AppCheckout" name="checkout" allow="nfc" allowfullscreen src="@CheckoutUrl" @onload="OnIframeLoad"></iframe>
}


@code {
    [Parameter, EditorRequired]
    public string? InvoiceId { get; set; }

    private bool _iframeLoaded;
    private string? _resultMessage;

    private string BaseUri => AccountManager.Account!.BaseUri;
    private string? CheckoutUrl => string.IsNullOrEmpty(InvoiceId) ? null : $"{BaseUri}i/{InvoiceId}";

    private async Task OnIframeLoad()
    {
        _iframeLoaded = true;
        await JS.InvokeVoidAsync("Interop.setContext", "#AppCheckout", BaseUri);

        NfcService.OnNfcDataReceived += OnNfcDataReceived;
        NfcService.StartNfc();
    }

    private async void OnNfcDataReceived(object? sender, NfcLnUrlRecord nFCNdefRecord)
    {
        try
        {
            var btcPayClient = new BTCPayAppClient(BaseUri);
            var req = new SubmitLnUrlRequest()
                {
                    InvoiceId = InvoiceId,
                Lnurl = nFCNdefRecord.LnUrl
                };

            var result = await btcPayClient.SubmitLNURLWithdrawForInvoice(req);

            _resultMessage = $"Payment processed successfully: {result}"; 
        }
        catch (Exception ex)
        {
            _resultMessage = $"Error processing NFC data: {ex.Message}";
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NfcService.OnNfcDataReceived -= OnNfcDataReceived;
    }

}
