@attribute [Route(Routes.WalletSettings)]
@using System.Text.Json
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Data
@using BTCPayApp.Core.Helpers
@using BTCPayApp.Core.Wallet
@using Microsoft.Extensions.Logging
@using BTCPayApp.UI.Components.Layout
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject OnChainWalletManager OnChainWalletManager
@inject IState<RootState> State
@inject ILogger<SettingsPage> Logger
@inject IAccountManager AccountManager

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
    </Titlebar>
</SectionContent>

<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <Alert Type="danger" Dismissible>@_errorMessage</Alert>
            }
            else if (!string.IsNullOrEmpty(_successMessage))
            {
                <Alert Type="success" Dismissible>@_successMessage</Alert>
            }
            @if (OnChainWalletManager.IsActive)
            {
                if (Derivation is null) return;
                var descriptor = Derivation!.Descriptor;
                var isStorePM = IsStorePaymentMethodId(Derivation.Identifier!);
                <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                    <h2 class="mb-0">@Derivation.Name</h2>
                    @if (isStorePM is true)
                    {
                        <span class="badge bg-info text-wrap">
                            Current store onchain payment method
                        </span>
                    }
                </header>
                <div class="box mb-2">
                    <div class="form-floating">
                        <TruncateCenter Text="@Config!.Fingerprint" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Fingerprint</label>
                    </div>
                    @if (!string.IsNullOrEmpty(Derivation.Identifier))
                    {
                        <div class="form-floating">
                            <TruncateCenter Text="@Derivation.Identifier" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                            <label>Identifier</label>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(descriptor))
                    {
                        <div class="form-floating">
                            <TruncateCenter Text="@descriptor" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                            <label>Descriptor</label>
                        </div>
                        @if (isStorePM is false && !string.IsNullOrEmpty(StoreId))
                        {
                            <button class="btn btn-primary mt-3" @onclick="SetStorePaymentMethod">
                                Set as onchain payment method for store
                            </button>
                        }
                    }
                </div>
                <div class="box">
                    <ul class="list-group list-group-flush list-group-links">
                        <li class="list-group-item">
                            <a href="@Routes.WalletSeed">
                                <Icon Symbol="wallet-seed"/>
                                <span>Your Recovery Phrase</span>
                                <Icon Symbol="caret-right"/>
                            </a>
                        </li>
                    </ul>
                </div>
            }
            else
            {
                <WalletStateAlert WalletState="State.Value.OnchainWalletState" ConnectionState="State.Value.ConnectionState" />
            }
            @if (_canConfigureWallet)
            {
                <button class="btn btn-primary" @onclick="GenerateWallet">Generate wallet</button>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private string PaymentMethodId => OnChainWalletManager.PaymentMethodId;
    private string? StoreId => AccountManager.CurrentStore?.Id;
    private string? _storePaymentMethodIdentifier;
    private string? _errorMessage;
    private string? _successMessage;
    private bool _canConfigureWallet;

    private WalletConfig? Config { get; set; }
    private WalletDerivation? Derivation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrEmpty(StoreId))
            await GetStorePaymentMethod();

        await SetupWallet();
    }

    private async Task GetStorePaymentMethod()
    {
        if (string.IsNullOrEmpty(StoreId)) return;
        try
        {
            var pm = await AccountManager.GetClient().GetStorePaymentMethod(StoreId, PaymentMethodId, true);
            _storePaymentMethodIdentifier = GetDerivationScheme(pm);
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Payment method {PaymentMethodId} unset for store {StoreId}", PaymentMethodId, StoreId);
        }
    }

    private async Task SetupWallet()
    {
        Config = await OnChainWalletManager.GetConfig();
        Derivation = Config?.Derivations.FirstOrDefault(d => d.Key == WalletDerivation.NativeSegwit).Value;
        _canConfigureWallet = AppSettings.AllowWalletGeneration && await OnChainWalletManager.CanConfigureWallet();
    }

    private async Task SetStorePaymentMethod()
    {
        if (string.IsNullOrEmpty(StoreId) || Derivation?.Descriptor is null) return;
        _successMessage = _errorMessage = null;
        try
        {
            var pm = await AccountManager.GetClient().UpdateStorePaymentMethod(StoreId, PaymentMethodId, new UpdatePaymentMethodRequest
            {
                Enabled = true,
                Config = Derivation.Descriptor
            });
            _storePaymentMethodIdentifier = GetDerivationScheme(pm);
            _successMessage = "Store payment method set.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error setting store payment method: {ex.Message}";
            Logger.LogError(ex, "Error setting payment method {PaymentMethodId} for store {StoreId}", PaymentMethodId, StoreId);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task GenerateWallet()
    {
        await AsyncExtensions.RunInOtherThread(async () =>
        {
            await OnChainWalletManager.Generate();
            await SetupWallet();
        });
    }

    private bool? IsStorePaymentMethodId(string identifier)
    {
        return !string.IsNullOrEmpty(StoreId) && !string.IsNullOrEmpty(identifier) && !string.IsNullOrEmpty(_storePaymentMethodIdentifier)
                ? identifier.Contains(_storePaymentMethodIdentifier)
                : null;
    }

    private string? GetDerivationScheme(GenericPaymentMethodData? pm)
    {
        if (string.IsNullOrEmpty(pm?.Config.ToString())) return null;
        using var jsonDoc = JsonDocument.Parse(pm.Config.ToString());
        return jsonDoc.RootElement.TryGetProperty("accountDerivation", out var derivationSchemeElement) &&
            derivationSchemeElement.GetString() is { } derivationScheme
            ? derivationScheme
            : null;
    }

    private string GetTitle() => $"{Config?.NBitcoinNetwork?.Name ?? ""} Onchain Wallet".Trim();
}

