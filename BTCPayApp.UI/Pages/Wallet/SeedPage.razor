@attribute [Route(Routes.WalletSeed)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Data
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Components.Layout
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject OnChainWalletManager OnChainWalletManager

<PageTitle>Secure your recovery phrase</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Secure your recovery phrase</h1>
    </Titlebar>
</SectionContent>

<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (Words is not null)
            {
                <p>
                    The combination of words below are called your recovery phrase.
                    The recovery phrase allows you to access and restore your wallet.
                </p>
                <p class="text-warning">
                    Anyone who knows it can access your funds.
                    Write them down on a piece of paper in this exact order.
                </p>
                <div class="box my-4">
                    <ol class="seed">
                        @foreach (var word in Words)
                        {
                            <li>@word</li>
                        }
                    </ol>
                </div>
                <div id="CtaContainer" class="container d-flex align-items-center justify-content-between">
                    <a href="@Routes.WalletSeedConfirm" class="btn btn-primary w-100 rounded-pill">
                        Confirm recovery phrase
                    </a>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Config = await OnChainWalletManager.GetConfig();
    }

    private WalletConfig? Config { get; set; }

    private string[]? Words => Config?.Mnemonic.Split(' ');
}

