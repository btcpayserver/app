@using BTCPayApp.UI.Models
@using BTCPayApp.UI.Util
@inject DisplayFormatter DisplayFormatter

<div @attributes="InputAttributes" class="@CssClass">
    <h2 class="mt-4">Sales Summary</h2>
    @if (Summary != null)
    {
        <div class="m-0 text-start">
            @foreach(var pair in SummaryData.Chunk(2))
            {
                <div class="row my-4">
                    @foreach(var item in pair)
                    {
                        <div class="col-6">
                            <div class="fw-bold fs-2">@(item.IsCurrency ? DisplayFormatter.Currency(item.StatValue, Summary.Currency, DisplayFormatter.CurrencyFormat.Symbol) : Convert.ToInt64(item.StatValue))</div>
                            <div class="text-muted">@item.Label</div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else if (Loading is true || string.IsNullOrEmpty(Error))
    {
        <div class="p-3 text-center">
            <LoadingIndicator />
        </div>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PrepareDataAsync();
    }

    [Parameter]
    public string? Error { get; set; }

    [Parameter]
    public bool? Loading { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    [Parameter]
    public SalesReportModel? Summary { get; set; }

    public class Stat
    {
        public string Label { get; set; } = string.Empty;
        public bool IsCurrency { get; set; }
        public decimal StatValue { get; set; }
    }

    private List<Stat> SummaryData { get; set; } = new();

    private string CssClass => $"container {(InputAttributes?.ContainsKey("class") is true ? InputAttributes["class"] : "")}".Trim();

    private void PrepareDataAsync()
    {
        if (Summary != null)
        {
            SummaryData = new List<Stat>
            {
                new Stat{Label = "Gross Sales", IsCurrency = true, StatValue = Summary.GrossSales},
                new Stat{Label = "Net Sales", IsCurrency = true, StatValue = Summary.NetSales},
                new Stat{Label = "Sales", IsCurrency = false, StatValue = Summary.SalesCount},
                new Stat{Label = "Average Sale", IsCurrency = true, StatValue = Summary.AverageSale},
                new Stat{Label = "Refunds", IsCurrency = false, StatValue = Summary.Refunds},
                new Stat{Label = "Discount & Comps", IsCurrency = true, StatValue = Summary.Discounts},
                new Stat{Label = "Taxes", IsCurrency = true, StatValue = Summary.Taxes},
                new Stat{Label = "Tips", IsCurrency = true, StatValue = Summary.Tips},
            };
        }
    }
}
