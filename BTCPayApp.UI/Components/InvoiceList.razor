@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayServer.Client.Models
@inject IAccountManager AccountManager
@inject IDispatcher Dispatcher
<div @attributes="InputAttributes" class="@CssClass">
    @if (Invoices is not null)
    {
        @if (Invoices.Any())
        {
            @foreach (var i in Invoices)
            {
                <InvoiceItem Invoice="@i" class="box"/>
            }
        }
        else if (!string.IsNullOrEmpty(Error))
        {
            <Alert Type="danger">@Error</Alert>
        }
        else
        {
            <div class="box">
                <p class="text-muted my-0">There are no invoices, yet.</p>
            </div>
        }
    }
    else if (Loading)
    {
        <div class="box">
            <div class="p-3 text-center">
                <LoadingIndicator/>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public IEnumerable<InvoiceData>? Invoices { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public string? Error { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    private string CssClass => $"invoice-list {(InputAttributes?.ContainsKey("class") is true ? InputAttributes["class"] : "")}".Trim();

    private string? StoreId => AccountManager.CurrentStore?.Id;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(StoreId))
            {
                Dispatcher.Dispatch(new StoreState.FetchInvoices(StoreId));
            }
        }
    }
    private async void OnStateChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }
}
