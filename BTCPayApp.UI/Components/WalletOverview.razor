@using BTCPayApp.UI.Util
@using BTCPayServer.Client.Models
@using NBitcoin
@implements IDisposable
@inject IJSRuntime JS
@inject DisplayFormatter DisplayFormatter

<div @attributes="InputAttributes" class="@CssClass">
    @if (BitcoinBalance != null)
    {
        <div class="amount text-center">
            <AmountDisplay Value="BitcoinBalance.Value" Unit="@BitcoinUnit" OnToggleDisplayCurrency="HandleBalanceClick" class="sats fw-bold fs-1" />
            @if (Loading is true)
            {
                <div class="text-muted"><LoadingIndicator/></div>
            }
            else if (CurrencyValue.HasValue)
            {
                <div class="fiat fw-semibold text-muted">~ @DisplayFormatter.Currency(CurrencyValue.Value, Currency!, DisplayFormatter.CurrencyFormat.Symbol)</div>
            }
        </div>
    }
    else if (Loading is true || string.IsNullOrEmpty(Error))
    {
        <div class="p-3 text-center">
            <LoadingIndicator/>
        </div>
    }
    <div id="Histogram" class="ct-chart"></div>
</div>

@code {
    [Parameter]
    public decimal? BitcoinBalance { get; set; }

    [Parameter]
    public string? BitcoinUnit { get; set; }

    [Parameter]
    public MoneyUnit MoneyUnit { get; set; }

    [Parameter]
    public HistogramData? Histogram { get; set; }

    [Parameter]
    public string? Currency { get; set; }

    [Parameter]
    public decimal? Rate { get; set; }

    [Parameter]
    public string? Error { get; set; }

    [Parameter]
    public bool? Loading { get; set; }

    [Parameter]
    public EventCallback<NotificationData> OnBalanceClick { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    private decimal? CurrencyValue => BitcoinBalance != null && Rate.HasValue && !string.IsNullOrEmpty(Currency)
        ? new Money(BitcoinBalance.Value, MoneyUnit).ToDecimal(MoneyUnit.BTC) * Rate.Value
        : null;

    private async Task HandleBalanceClick()
    {
        if (OnBalanceClick.HasDelegate)
            await OnBalanceClick.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Histogram != null)
            await JS.InvokeVoidAsync("Chart.renderLineChart", "#Histogram", Histogram.Labels, Histogram.Series, Histogram.Type.ToString(), "BTC", BitcoinUnit, null, Currency);
    }

    public void Dispose()
    {
        if (Histogram != null)
            JS.InvokeVoidAsync("Chart.dispose", "#Histogram");
    }

    private string CssClass => $"d-flex flex-column gap-4 wallet-overview {(InputAttributes?.ContainsKey("class") is true ? InputAttributes["class"] : "")}".Trim();
}
