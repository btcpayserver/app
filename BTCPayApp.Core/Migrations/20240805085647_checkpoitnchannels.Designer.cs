// <auto-generated />
using System;
using BTCPayApp.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BTCPayApp.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240805085647_checkpoitnchannels")]
    partial class checkpoitnchannels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("BTCPayApp.Core.Data.AppLightningPayment", b =>
                {
                    b.Property<string>("PaymentHash")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Inbound")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentRequest")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Preimage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<long>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentHash", "Inbound", "PaymentId");

                    b.HasIndex("EntityKey")
                        .IsUnique();

                    b.ToTable("LightningPayments", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_DELETE_APPLIGHTNINGPAYMENT");

                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_APPLIGHTNINGPAYMENT");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_APPLIGHTNINGPAYMENT");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_DELETE_APPLIGHTNINGPAYMENT", "CREATE TRIGGER LC_TRIGGER_AFTER_DELETE_APPLIGHTNINGPAYMENT\r\nAFTER DELETE ON \"LightningPayments\"\r\nFOR EACH ROW\r\nBEGIN\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Payment', \r\n  OLD.\"Version\", \r\n  OLD.\"EntityKey\", \r\n  2;\r\nEND;")
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_APPLIGHTNINGPAYMENT", "CREATE TRIGGER LC_TRIGGER_AFTER_INSERT_APPLIGHTNINGPAYMENT\r\nAFTER INSERT ON \"LightningPayments\"\r\nFOR EACH ROW\r\nBEGIN\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Payment', \r\n  NEW.\"Version\", \r\n  NEW.\"EntityKey\", \r\n  0;\r\nEND;")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_APPLIGHTNINGPAYMENT", "CREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_APPLIGHTNINGPAYMENT\r\nAFTER UPDATE ON \"LightningPayments\"\r\nFOR EACH ROW\r\nBEGIN\r\n  UPDATE \"LightningPayments\"\r\n  SET \"Version\" = OLD.\"Version\" + 1\r\n  WHERE OLD.\"PaymentHash\" = \"LightningPayments\".\"PaymentHash\";\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Payment', \r\n  OLD.\"Version\" + 1, \r\n  NEW.\"EntityKey\", \r\n  1;\r\nEND;");
                });

            modelBuilder.Entity("BTCPayApp.Core.Data.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("Checkpoint")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityKey")
                        .IsUnique();

                    b.ToTable("LightningChannels", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_DELETE_CHANNEL");

                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_CHANNEL");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_CHANNEL");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_DELETE_CHANNEL", "CREATE TRIGGER LC_TRIGGER_AFTER_DELETE_CHANNEL\r\nAFTER DELETE ON \"LightningChannels\"\r\nFOR EACH ROW\r\nBEGIN\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Channel', \r\n  OLD.\"Version\", \r\n  OLD.\"EntityKey\", \r\n  2;\r\nEND;")
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_CHANNEL", "CREATE TRIGGER LC_TRIGGER_AFTER_INSERT_CHANNEL\r\nAFTER INSERT ON \"LightningChannels\"\r\nFOR EACH ROW\r\nBEGIN\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Channel', \r\n  NEW.\"Version\", \r\n  NEW.\"EntityKey\", \r\n  0;\r\nEND;")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_CHANNEL", "CREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_CHANNEL\r\nAFTER UPDATE ON \"LightningChannels\"\r\nFOR EACH ROW\r\nBEGIN\r\n  UPDATE \"LightningChannels\"\r\n  SET \"Version\" = OLD.\"Version\" + 1\r\n  WHERE OLD.\"Id\" = \"LightningChannels\".\"Id\";\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Channel', \r\n  OLD.\"Version\" + 1, \r\n  NEW.\"EntityKey\", \r\n  1;\r\nEND;");
                });

            modelBuilder.Entity("BTCPayApp.Core.Data.ChannelAlias", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelAliases");
                });

            modelBuilder.Entity("BTCPayApp.Core.Data.Outbox", b =>
                {
                    b.Property<string>("Entity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int>("ActionType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Entity", "Key", "ActionType", "Version");

                    b.ToTable("OutboxItems");
                });

            modelBuilder.Entity("BTCPayApp.Core.Data.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Backup")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<long>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Key");

                    b.HasIndex("EntityKey")
                        .IsUnique();

                    b.ToTable("Settings", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_DELETE_SETTING");

                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_SETTING");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_SETTING");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_DELETE_SETTING", "CREATE TRIGGER LC_TRIGGER_AFTER_DELETE_SETTING\r\nAFTER DELETE ON \"Settings\"\r\nFOR EACH ROW\r\nWHEN \r\n  \r\n  OLD.\"Backup\" IS TRUE\r\nBEGIN\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Setting', \r\n  OLD.\"Version\", \r\n  OLD.\"EntityKey\", \r\n  2;\r\nEND;")
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_SETTING", "CREATE TRIGGER LC_TRIGGER_AFTER_INSERT_SETTING\r\nAFTER INSERT ON \"Settings\"\r\nFOR EACH ROW\r\nWHEN \r\n  \r\n  NEW.\"Backup\" IS TRUE\r\nBEGIN\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Setting', \r\n  NEW.\"Version\", \r\n  NEW.\"EntityKey\", \r\n  0;\r\nEND;")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_SETTING", "CREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_SETTING\r\nAFTER UPDATE ON \"Settings\"\r\nFOR EACH ROW\r\nWHEN \r\n  \r\n  OLD.\"Backup\" IS TRUE\r\nBEGIN\r\n  UPDATE \"Settings\"\r\n  SET \"Version\" = OLD.\"Version\" + 1\r\n  WHERE OLD.\"Key\" = \"Settings\".\"Key\";\r\n  INSERT INTO \"OutboxItems\" (\"Entity\", \"Version\", \"Key\", \"ActionType\") SELECT 'Setting', \r\n  OLD.\"Version\" + 1, \r\n  NEW.\"EntityKey\", \r\n  1;\r\nEND;");
                });

            modelBuilder.Entity("BTCPayApp.Core.Data.ChannelAlias", b =>
                {
                    b.HasOne("BTCPayApp.Core.Data.Channel", "Channel")
                        .WithMany("Aliases")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BTCPayApp.Core.Data.Channel", b =>
                {
                    b.Navigation("Aliases");
                });
#pragma warning restore 612, 618
        }
    }
}
